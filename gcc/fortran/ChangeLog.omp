2023-07-14  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.cc (gfc_trans_omp_arrayshape_type): Reverse dimension
	ordering for created array type.

2023-07-06  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.cc (omp_split_map_op, omp_join_map_op,
	omp_map_decayed_kind): New functions.
	(gfc_trans_omp_instantiate_mapper): Add CD parameter.  Implement map
	kind decay.
	(gfc_trans_omp_instantiate_mappers): Add CD parameter.  Pass to above
	function.
	(gfc_trans_omp_target_data): Instantiate mappers for 'omp target data'.
	(gfc_trans_omp_target_enter_data): Instantiate mappers for 'omp target
	enter data'.
	(gfc_trans_omp_target_exit_data): Instantiate mappers for 'omp target
	exit data'.

2023-07-03  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.cc (gfc_omp_deep_map_kind_p): Handle
	GOMP_MAP_{TO,FROM}_GRID, GOMP_MAP_GRID_{DIM,STRIDE}.
	(gfc_trans_omp_arrayshape_type, gfc_omp_calculate_gcd,
	gfc_desc_to_omp_noncontig_array, gfc_omp_contiguous_update_p): New
	functions.
	(gfc_trans_omp_clauses): Handle noncontiguous to/from clauses for OMP
	"target update" directives.

2023-06-30  Julian Brown  <julian@codesourcery.com>

	* dump-parse-tree.cc (show_attr): Show omp_udm_artificial_var flag.
	(show_omp_namelist): Support OMP_MAP_POINTER_ONLY and OMP_MAP_UNSET.
	* f95-lang.cc (LANG_HOOKS_OMP_FINISH_MAPPER_CLAUSES,
	LANG_HOOKS_OMP_EXTRACT_MAPPER_DIRECTIVE,
	LANG_HOOKS_OMP_MAP_ARRAY_SECTION): Define language hooks.
	* gfortran.h (gfc_statement): Add ST_OMP_DECLARE_MAPPER.
	(symbol_attribute): Add omp_udm_artificial_var attribute.
	(gfc_omp_map_op): Add OMP_MAP_POINTER_ONLY and OMP_MAP_UNSET.
	(gfc_omp_namelist): Add udm pointer to u2 union.
	(gfc_omp_udm): New struct.
	(gfc_omp_namelist_udm): New struct.
	(gfc_symtree): Add omp_udm pointer.
	(gfc_namespace): Add omp_udm_root symtree. Add omp_udm_ns flag.
	(gfc_free_omp_namelist): Update prototype.
	(gfc_free_omp_udm, gfc_omp_udm_find, gfc_find_omp_udm,
	gfc_resolve_omp_udms): Add prototypes.
	* match.cc (gfc_free_omp_namelist): Change FREE_NS and FREE_ALIGN
	parameters to LIST number, to handle freeing user-defined mapper
	namelists safely.
	* match.h (gfc_match_omp_declare_mapper): Add prototype.
	* module.cc (ab_attribute): Add AB_OMP_DECLARE_MAPPER_VAR.
	(attr_bits): Add OMP_DECLARE_MAPPER_VAR.
	(mio_symbol_attribute): Read/write AB_OMP_DECLARE_MAPPER_VAR attribute.
	Set referenced attr on read.
	(omp_map_clause_ops, omp_map_cardinality): New arrays.
	(load_omp_udms, check_omp_declare_mappers): New functions.
	(read_module): Load and check OMP declare mappers.
	(write_omp_udm, write_omp_udms): New functions.
	(write_module): Write OMP declare mappers.
	* openmp.cc (gfc_free_omp_clauses, gfc_match_omp_variable_list,
	gfc_match_omp_to_link, gfc_match_omp_depend_sink,
	gfc_match_omp_clause_reduction): Update calls to gfc_free_omp_namelist.
	(gfc_free_omp_udm, gfc_find_omp_udm, gfc_omp_udm_find,
	gfc_match_omp_declare_mapper): New functions.
	(gfc_match_omp_clauses): Add DEFAULT_MAP_OP parameter. Update calls to
	gfc_free_omp_namelist.  Add declare mapper support.
	(resolve_omp_clauses): Add declare mapper support.  Update calls to
	gfc_free_omp_namelist.
	(gfc_resolve_omp_udm, gfc_resolve_omp_udms): New functions.
	* parse.cc (decode_omp_directive): Add declare mapper support.
	(case_omp_decl): Add ST_OMP_DECLARE_MAPPER case.
	(gfc_ascii_statement): Add ST_OMP_DECLARE_MAPPER case.
	* resolve.cc (resolve_types): Call gfc_resolve_omp_udms.
	* st.cc (gfc_free_statement): Update call to gfc_free_omp_namelist.
	* symbol.cc (free_omp_udm_tree): New function.
	(gfc_free_namespace): Call above.
	* trans-decl.cc (omp_declare_mapper_ns): New global.
	(gfc_finish_var_decl, gfc_generate_function_code): Support declare
	mappers.
	(gfc_trans_deferred_vars): Ignore artificial declare-mapper vars.
	* trans-openmp.cc (tree-iterator.h): Include.
	(toc_directive): New enum.
	(gfc_trans_omp_array_section): Change OP and OPENMP parameters to
	toc_directive CD ('clause directive').
	(gfc_omp_finish_mapper_clauses, gfc_omp_extract_mapper_directive,
	gfc_omp_map_array_section): New functions.
	(omp_clause_directive): New enum.
	(gfc_trans_omp_clauses): Remove DECLARE_SIMD and OPENACC parameters.
	Replace with toc_directive CD, defaulting to TOC_OPENMP.  Add declare
	mapper support and OMP_MAP_POINTER_ONLY support.
	(gfc_trans_omp_construct, gfc_trans_oacc_executable_directive,
	gfc_trans_oacc_combined_directive): Update calls to
	gfc_trans_omp_clauses.
	(gfc_subst_replace, gfc_subst_prepend_ref): New variables.
	(gfc_subst_in_expr_1, gfc_subst_in_expr, gfc_subst_mapper_var,
	gfc_trans_omp_instantiate_mapper, gfc_trans_omp_instantiate_mappers,
	gfc_record_mapper_bindings_code_fn, gfc_record_mapper_bindings_expr_fn,
	gfc_find_nested_mappers, gfc_record_mapper_bindings): New functions.
	(gfc_typespec * hash traits): New template.
	(omp_declare_mapper_ns): Extern declaration.
	(gfc_trans_omp_target): Call gfc_trans_omp_instantiate_mappers and
	gfc_record_mapper_bindings. Update calls to gfc_trans_omp_clauses.
	(gfc_trans_omp_declare_simd, gfc_trans_omp_declare_variant): Update
	calls to gfc_trans_omp_clauses.
	(gfc_trans_omp_mapper_name, gfc_trans_omp_declare_mapper,
	gfc_trans_omp_declare_mappers): New functions.
	* trans-stmt.h (gfc_trans_omp_declare_mappers): Add prototype.
	* trans.h (gfc_omp_finish_mapper_clauses,
	gfc_omp_extract_mapper_directive, gfc_omp_map_array_section): Add
	prototypes.

2023-06-30  Julian Brown  <julian@codesourcery.com>

	* parse.cc (tree.h, fold-const.h, tree-hash-traits.h): Add includes
	(for additions to omp-general.h).

2023-06-19  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.cc (gfc_omp_finish_clause): Treat implicitly-mapped
	assumed-size arrays as zero-sized for OpenACC, rather than an error.

2023-06-19  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.cc (gfc_omp_finish_clause): Handle "declare create" for
	scalar allocatable variables.
	(gfc_trans_omp_clauses): Don't include allocatable vars in synthetic
	"acc data" region created for "declare create" variables.  Mark such
	variables with the "oacc declare create" attribute instead.  Don't
	create ALWAYS_POINTER mapping for target-to-host updates of declare
	create variables.
	(gfc_trans_oacc_declare): Handle empty clause list.

2023-06-19  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.cc (gfc_omp_deep_map_kind_p): Add GOMP_MAP_STRUCT_UNORD.

2023-06-19  Julian Brown  <julian@codesourcery.com>

	* dependency.cc (gfc_omp_expr_prefix_same): New function.
	* dependency.h (gfc_omp_expr_prefix_same): Add prototype.
	* gfortran.h (gfc_omp_namelist): Add "duplicate_of" field to "u2"
	union.
	* trans-openmp.cc (dependency.h): Include.
	(gfc_trans_omp_array_section): Adjust mapping node arrangement for
	array descriptors.  Use GOMP_MAP_TO_PSET or
	GOMP_MAP_RELEASE/GOMP_MAP_DELETE with the OMP_CLAUSE_RELEASE_DESCRIPTOR
	flag set.
	(gfc_symbol_rooted_namelist): New function.
	(gfc_trans_omp_clauses): Check subcomponent and subarray/element
	accesses elsewhere in the clause list for pointers to derived types or
	array descriptors, and adjust or drop mapping nodes appropriately.
	Adjust for changes to mapping node arrangement.
	(gfc_trans_oacc_executable_directive): Pass code op through.

2023-06-19  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.cc (gfc_trans_omp_array_section): Add OPENMP parameter.
	Use GOMP_MAP_ATTACH_DETACH instead of GOMP_MAP_ALWAYS_POINTER for
	derived type components.
	(gfc_trans_omp_clauses): Update calls to gfc_trans_omp_array_section.

2023-06-19  Julian Brown  <julian@codesourcery.com>

	Revert:
	* trans-openmp.cc: Handle implicit "present".

2023-06-19  Julian Brown  <julian@codesourcery.com>

	Revert:
	2019-05-19  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.cc (gfc_omp_finish_clause): Guard addition of clauses for
	pointers with DECL_P.

2023-06-19  Julian Brown  <julian@codesourcery.com>

	Revert:
	2019-07-10  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.cc (gfc_omp_finish_clause): Change clauses mapping
	assumed-size arrays to use the GOMP_MAP_FORCE_PRESENT map type.

2023-06-13  Sandra Loosemore  <sandra@codesourcery.com>

	* openmp.cc: Include omp-api.h.
	(resolve_omp_clauses): Consolidate inscan reduction clause conflict
	checking here.
	(scan_for_next_loop_in_chain): New.
	(scan_for_next_loop_in_block): New.
	(gfc_resolve_omp_do_blocks): Set omp_current_do_collapse properly.
	Handle imperfectly-nested loops when looking for nested omp scan.
	Refactor to move inscan reduction clause conflict checking to
	resolve_omp_clauses.
	(gfc_resolve_do_iterator): Handle imperfectly-nested loops.
	(struct icode_error_state): New.
	(icode_code_error_callback): New.
	(icode_expr_error_callback): New.
	(diagnose_intervening_code_errors_1): New.
	(diagnose_intervening_code_errors): New.
	(restructure_intervening_code): New.
	(resolve_nested_loops): Update error handling, and extend to
	detect imperfect nesting errors and check validity of
	intervening code.  Call restructure_intervening_code if needed.
	(resolve_omp_do): Rename collapse -> count.

2023-06-13  Sandra Loosemore  <sandra@codesourcery.com>

	* openmp.cc (find_nested_loop_in_chain): Move up in file.
	(find_nested_loop_in_block): Likewise.
	(resolve_nested_loops): New helper function to consolidate code
	from...
	(resolve_omp_do, resolve_omp_tile): ...these functions.  Also,
	remove the redundant call to resolve_nested_loop_transforms, and
	use uniform error message wording.

2023-06-12  Tobias Burnus  <tobias@codesourcery.com>

	* trans-openmp.cc (gfc_omp_deep_map_kind_p): Fix conditions for
	present modifier.

2023-06-07  Tobias Burnus  <tobias@codesourcery.com>

	Backported from mainline:
	2023-06-06  Kwok Cheung Yeung  <kcy@codesourcery.com>
		    Tobias Burnus  <tobias@codesourcery.com>

	* dump-parse-tree.cc (show_omp_namelist): Display 'present' map
	modifier.
	(show_omp_clauses): Display 'present' motion modifier for 'to'
	and 'from' clauses.

	* gfortran.h (enum gfc_omp_map_op): Add entries with 'present'
	modifiers.
	(struct gfc_omp_namelist): Add 'present_modifer'.
	* openmp.cc (gfc_match_motion_var_list): New, handles optional
	'present' modifier for to/from clauses.
	(gfc_match_omp_clauses): Call it for to/from clauses; parse 'present'
	in defaultmap and map clauses.
	(resolve_omp_clauses): Allow 'present' modifiers on 'target',
	'target data', 'target enter' and 'target exit' directives.
	* trans-openmp.cc (gfc_trans_omp_clauses): Apply 'present' modifiers
	to tree node for 'map', 'to' and 'from' clauses.  Apply 'present' for
	defaultmap.

2023-06-07  Tobias Burnus  <tobias@codesourcery.com>

	Reverted:
	2023-02-01  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* dump-parse-tree.cc (show_omp_namelist): Display 'present' map
	modifier.
	(show_omp_clauses): Display 'present' motion modifier for 'to'
	and 'from' clauses.
	* gfortran.h (enum gfc_omp_map_op): Add entries with 'present'
	modifiers.
	(enum gfc_omp_motion_modifier): New.
	(struct gfc_omp_namelist): Add motion_modifier field.
	* openmp.cc (gfc_match_omp_variable_list): Add new parameter with
	default.  Parse 'present' motion modifier and apply.
	(gfc_match_omp_clauses): Parse 'present' in defaultmap, 'from'
	clauses, 'map' clauses and 'to' clauses.
	(resolve_omp_clauses): Allow 'present' modifiers on 'target',
	'target data', 'target enter' and 'target exit'	directives.
	* trans-openmp.cc (gfc_omp_deep_map_kind_p): Handle map kinds with
	'present' modifier.
	(gfc_trans_omp_clauses): Apply 'present' modifiers to tree node for
	'map', 'to' and 'from'	clauses.  Apply 'present' for defaultmap.

2023-06-01  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2023-06-01  Tobias Burnus  <tobias@codesourcery.com>

	* parse.cc (decode_omp_directive): Accept all pure directives
	inside a PURE procedures; handle 'error at(execution).

2023-05-30  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2023-04-25  Tobias Burnus  <tobias@codesourcery.com>

	* openmp.cc (gfc_resolve_omp_do_blocks): Handle zero
	or more than one exec statements before/after 'omp scan'.
	* trans-openmp.cc (gfc_trans_omp_do): Likewise.

2023-04-27  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* openmp.cc (compute_goto_targets): Check label before adding to
	goto_targets.

2023-03-24  Frederik Harwath  <frederik@codesourcery.com>

	* openmp.cc (omp_unroll_removes_loop_nest): Move down in file.
	(resolve_loop_transform_generic): Remove, and ...
	(resolve_omp_unroll): ... inline and adapt here. Move function.
	Move functin.
	(find_nested_loop_in_block): New function.
	(find_nested_loop_in_chain): New function, used ...
	(is_outer_iteration_variable): ... here, and ...
	(expr_is_invariant): ... here.
	(resolve_omp_do): Adjust code for resolving loop transformations.
	(resolve_omp_tile): Likewise.
	* trans-openmp.cc (gfc_trans_omp_clauses): Set OMP_TRANSFROM_LEVEL
	on new clause.
	(compute_transformed_depth): New function to compute the depth
	("collapse") of a transformed loop nest, used
	(gfc_trans_omp_do): ... here.

2023-03-24  Frederik Harwath  <frederik@codesourcery.com>

	* gfortran.h (enum gfc_statement): Add ST_OMP_TILE, ST_OMP_END_TILE.
	(enum gfc_exec_op): Add EXEC_OMP_TILE.
	(loop_transform_p): New declaration.
	(struct gfc_omp_clauses): Add "tile_sizes" field.
	* dump-parse-tree.cc (show_omp_clauses): Handle "tile_sizes" dumping.
	(show_omp_node): Handle EXEC_OMP_TILE.
	(show_code_node): Likewise.
	* match.h (gfc_match_omp_tile): New declaration.
	* openmp.cc (gfc_free_omp_clauses): Free "tile_sizes" field.
	(match_tile_sizes): New function.
	(OMP_TILE_CLAUSES): New macro.
	(gfc_match_omp_tile): New function.
	(resolve_omp_do): Handle EXEC_OMP_TILE.
	(resolve_omp_tile): New function.
	(omp_code_to_statement): Handle EXEC_OMP_TILE.
	(gfc_resolve_omp_directive): Likewise.
	* parse.cc (decode_omp_directive): Handle ST_OMP_END_TILE
	and ST_OMP_TILE.
	(next_statement): Handle ST_OMP_TILE.
	(gfc_ascii_statement): Likewise.
	(parse_omp_do): Likewise.
	(parse_executable): Likewise.
	* resolve.cc (gfc_resolve_blocks): Handle EXEC_OMP_TILE.
	(gfc_resolve_code): Likewise.
	* st.cc (gfc_free_statement): Likewise.
	* trans-openmp.cc (gfc_trans_omp_clauses): Handle "tile_sizes" field.
	(loop_transform_p): New function.
	(gfc_expr_list_len): New function.
	(gfc_trans_omp_do): Handle EXEC_OMP_TILE.
	(gfc_trans_omp_directive): Likewise.
	* trans.cc (trans_code): Likewise.

2023-03-24  Frederik Harwath  <frederik@codesourcery.com>

	* openmp.cc (enum omp_mask2): Adjust to renamings.
	(gfc_match_omp_clauses): Likewise.
	* trans-openmp.cc (gfc_trans_omp_clauses): Likewise.

2023-03-24  Frederik Harwath  <frederik@codesourcery.com>

	* dump-parse-tree.cc (show_omp_clauses): Handle "unroll full"
	and "unroll partial".
	(show_omp_node): Handle OMP_UNROLL.
	(show_code_node): Handle EXEC_OMP_UNROLL.
	* gfortran.h (enum gfc_statement): Add ST_OMP_UNROLL, ST_OMP_END_UNROLL.
	(enum gfc_exec_op): Add EXEC_OMP_UNROLL.
	* match.h (gfc_match_omp_unroll): Declare.
	* openmp.cc (enum omp_mask2): Add OMP_CLAUSE_UNROLL_FULL,
	OMP_CLAUSE_UNROLL_NONE, OMP_CLAUSE_UNROLL_PARTIAL.
	(gfc_match_omp_clauses): Handle "omp unroll partial".
	(OMP_UNROLL_CLAUSES): New macro definition.
	(gfc_match_omp_unroll): Match "full" clause.
	(omp_unroll_removes_loop_nest): New function.
	(resolve_omp_unroll): New function.
	(resolve_omp_do): Accept and verify "omp unroll"
	directives between directive and loop.
	(omp_code_to_statement): Handle EXEC_OMP_UNROLL.
	(gfc_resolve_omp_directive): Likewise.
	* parse.cc (decode_omp_directive): Handle "undroll" and "end unroll".
	(next_statement): Handle ST_OMP_UNROLL.
	(gfc_ascii_statement): Handle ST_OMP_UNROLL and ST_OMP_END_UNROLL.
	(parse_omp_do): Accept ST_OMP_UNROLL and ST_OMP_END_UNROLL
	before/after loop.
	(parse_executable): Handle ST_OMP_UNROLL.
	* resolve.cc (gfc_resolve_blocks): Handle EXEC_OMP_UNROLL.
	(gfc_resolve_code): Likewise.
	* st.cc (gfc_free_statement): Likewise.
	* trans-openmp.cc (gfc_trans_omp_clauses): Handle unroll clauses.
	(gfc_trans_omp_do): Handle OMP_CLAUSE_UNROLL_FULL,
	OMP_CLAUSE_UNROLL_PARTIAL, OMP_CLAUSE_UNROLL_NONE creation.
	(gfc_trans_omp_directive): Handle EXEC_OMP_UNROLL.
	* trans.cc (trans_code): Likewise.

2023-03-23  Tobias Burnus  <tobias@codesourcery.com>

	* trans-openmp.cc (gfc_has_alloc_comps): Add 'bool
	shallow_alloc_only=false' arg.
	(gfc_omp_replace_alloc_by_to_mapping): New, call it.
	(gfc_omp_deep_map_kind_p): Return 'true' also for '(present,)alloc'.
	(gfc_omp_deep_mapping_item, gfc_omp_deep_mapping_do): On map entering,
	replace shallowly 'alloc'/'from' by '(from)to' mapping if there are
	allocatable components.

2023-03-23  Tobias Burnus  <tobias@codesourcery.com>

	* class.cc (generate_callback_wrapper): Add attr.class_ok check.
	* resolve.cc (resolve_fl_derived): Likewise.

2023-03-23  Tobias Burnus  <tobias@codesourcery.com>

	* trans-openmp.cc (gfc_trans_omp_clauses): Fix unmapping of
	GOMP_MAP_POINTER for scalar allocatables/pointers.

2023-02-22  Tobias Burnus  <tobias@codesourcery.com>

	* trans-decl.cc (gfc_get_symbol_decl): Add attributes
	such as 'declare target' also to hidden artificial
	variable for deferred-length character variables.
	* trans-openmp.cc (gfc_trans_omp_array_section,
	gfc_trans_omp_clauses, gfc_trans_omp_target_exit_data):
	Improve mapping of array descriptors and deferred-length
	string variables.

2023-02-01  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* dump-parse-tree.cc (show_omp_namelist): Display 'present' map
	modifier.
	(show_omp_clauses): Display 'present' motion modifier for 'to'
	and 'from' clauses.
	* gfortran.h (enum gfc_omp_map_op): Add entries with 'present'
	modifiers.
	(enum gfc_omp_motion_modifier): New.
	(struct gfc_omp_namelist): Add motion_modifier field.
	* openmp.cc (gfc_match_omp_variable_list): Add new parameter with
	default.  Parse 'present' motion modifier and apply.
	(gfc_match_omp_clauses): Parse 'present' in defaultmap, 'from'
	clauses, 'map' clauses and 'to' clauses.
	(resolve_omp_clauses): Allow 'present' modifiers on 'target',
	'target data', 'target enter' and 'target exit'	directives.
	* trans-openmp.cc (gfc_omp_deep_map_kind_p): Handle map kinds with
	'present' modifier.
	(gfc_trans_omp_clauses): Apply 'present' modifiers to tree node for
	'map', 'to' and 'from'	clauses.  Apply 'present' for defaultmap.

2022-11-02  Tobias Burnus  <tobias@codesourcery.com>

	* trans-openmp.cc (gfc_trans_omp_clauses): Ensure DT struct-comp with
	array descriptor and 'alloc:' have the descriptor mapped with 'to:'.

2022-11-02  Tobias Burnus  <tobias@codesourcery.com>

	* openmp.cc (resolve_omp_clauses): Apply to OpenMP target update.

2022-10-19  Tobias Burnus  <tobias@codesourcery.com>

	* trans-array.cc (non_negative_strides_array_p): Fix handling
	of GFC_DECL_SAVED_DESCRIPTOR.
	(gfc_conv_array_ref): Use ARRAY_REF again when possible.

2022-09-28  Paul-Antoine Arras  <pa@codesourcery.com>

	* parse.cc (gfc_ascii_statement): Missing $ in !$OMP END METADIRECTIVE.
	(parse_omp_structured_block): Fix handling of OMP end metadirective.
	(parse_omp_metadirective_body): Reject OMP end statements
	at the end of an OMP metadirective.

2022-06-17  Chung-Lin Tang  <cltang@codesourcery.com>

	Backport from mainline:
	2022-06-17  Chung-Lin Tang  <cltang@codesourcery.com>

	* gfortran.h (struct gfc_omp_namelist): Add memspace_sym, traits_sym
	fields.
	(OMP_LIST_USES_ALLOCATORS): New list enum.
	* openmp.cc (enum omp_mask2): Add OMP_CLAUSE_USES_ALLOCATORS.
	(gfc_match_omp_clause_uses_allocators): New function.
	(gfc_match_omp_clauses): Add case to handle OMP_CLAUSE_USES_ALLOCATORS.
	(OMP_TARGET_CLAUSES): Add OMP_CLAUSE_USES_ALLOCATORS.
	(resolve_omp_clauses): Add "USES_ALLOCATORS" to clause_names[].
	* dump-parse-tree.cc (show_omp_namelist): Handle OMP_LIST_USES_ALLOCATORS.
	(show_omp_clauses): Likewise.
	* trans-array.cc (gfc_conv_array_initializer): Adjust array index
	to always be a created tree expression instead of NULL_TREE when zero.
	* trans-openmp.cc (gfc_trans_omp_clauses): For ALLOCATE clause, handle
	using gfc_trans_omp_variable for EXPR_VARIABLE exprs.
	Add handling of OMP_LIST_USES_ALLOCATORS case.
	* types.def (BT_FN_VOID_PTRMODE): Define.
	(BT_FN_PTRMODE_PTRMODE_INT_PTR): Define.

2022-05-12  Tobias Burnus  <tobias@codesourcery.com>

	* trans-array.cc (gfc_scalar_elemental_arg_saved_as_reference):
	Return true for attr.proc_pointer expressions.

2022-04-27  Tobias Burnus <tobias@codesourcery.com>

	* resolve.cc (gfc_resolve_finalizers): Remove
	gfc_resolve_finalizers calls, use gfc_is_finalizable.
	(resolve_fl_derived): Resolve derived-type components
	first.

2022-04-25  Tobias Burnus  <tobias@codesourcery.com>

	* resolve.cc (gfc_resolve_finalizers): Also resolve allocatable comps.

2022-03-10  Andrew Stubbs  <ams@codesourcery.com>

	* openmp.cc (gfc_match_omp_requires): Allow "requires
	unified_share_memory" and "unified_address".

2022-01-08  Hafiz Abid Qadeer  <abidh@codesourcery.com>

	* gfortran.h (struct access_ref): Declare new members
	omp_allocated and omp_allocated_end.
	* openmp.cc (gfc_match_omp_allocate): Set new_st.resolved_sym to
	NULL.
	(prepare_omp_allocated_var_list_for_cleanup): New function.
	(gfc_resolve_omp_allocate): Call it.
	* trans-decl.cc (gfc_trans_deferred_vars): Process omp_allocated.
	* trans-openmp.cc (gfc_trans_omp_allocate): Set kind for the stmt
	generated for allocate directive.

2022-03-09  Hafiz Abid Qadeer  <abidh@codesourcery.com>

	* trans-openmp.cc (gfc_trans_omp_clauses): Handle OMP_LIST_ALLOCATOR.
	(gfc_trans_omp_allocate): New function.
	(gfc_trans_omp_directive): Handle EXEC_OMP_ALLOCATE.

2022-03-09  Hafiz Abid Qadeer  <abidh@codesourcery.com>

	* dump-parse-tree.cc (show_omp_node): Handle EXEC_OMP_ALLOCATE.
	(show_code_node): Likewise.
	* gfortran.h (enum gfc_statement): Add ST_OMP_ALLOCATE.
	(OMP_LIST_ALLOCATOR): New enum value.
	(enum gfc_exec_op): Add EXEC_OMP_ALLOCATE.
	* match.h (gfc_match_omp_allocate): New function.
	* openmp.cc (enum omp_mask1): Add OMP_CLAUSE_ALLOCATOR.
	(OMP_ALLOCATE_CLAUSES): New define.
	(gfc_match_omp_allocate): New function.
	(resolve_omp_clauses): Add ALLOCATOR in clause_names.
	(omp_code_to_statement): Handle EXEC_OMP_ALLOCATE.
	(EMPTY_VAR_LIST): New define.
	(check_allocate_directive_restrictions): New function.
	(gfc_resolve_omp_allocate): Likewise.
	(gfc_resolve_omp_directive): Handle EXEC_OMP_ALLOCATE.
	* parse.cc (decode_omp_directive): Handle ST_OMP_ALLOCATE.
	(next_statement): Likewise.
	(gfc_ascii_statement): Likewise.
	* resolve.cc (gfc_resolve_code): Handle EXEC_OMP_ALLOCATE.
	* st.cc (gfc_free_statement): Likewise.
	* trans.cc (trans_code): Likewise.

2022-03-01  Tobias Burnus  <tobias@codesourcery.com>

	* class.cc (finalization_scalarizer): Mark syms as artificial.
	(generate_callback_wrapper): New.
	(gfc_find_derived_vtab): Call it, add _callback comp.
	* f95-lang.cc (LANG_HOOKS_OMP_DEEP_MAPPING,
	LANG_HOOKS_OMP_DEEP_MAPPING_P,
	LANG_HOOKS_OMP_DEEP_MAPPING_CNT): Redeinfe
	* gfortran.h (gfc_import_iso_c_binding_module,
	GFC_CLASS_CALLBACK_DEFAULT_FLAG, GFC_CLASS_CALLBACK_VTABLE_FLAG,
	GFC_CLASS_CB_ALLOCATABLE, GFC_CLASS_CB_POINTER,
	GFC_CLASS_CB_PROC_POINTER, GFC_CLASS_CB_VTABLE,
	GFC_CLASS_CB_VPTR): New.
	* match.cc (select_type_set_tmp): Propagate allocatable property.
	* module.cc (MOD_VERSION): Bump due to vtab change.
	(import_iso_c_binding_module): New import_all arg.
	(gfc_import_iso_c_binding_module): New.
	(gfc_use_module): Update call.
	* openmp.cc (resolve_omp_clauses): Accept DT with alloc comps.
	* resolve.cc (gfc_resolve_formal_arglist, gfc_resolve_intrinsic,
	resolve_fl_procedure, resolve_types): Permit some violations
	for internal code.
	* trans-array.cc (gfc_conv_descriptor_stride_get,
	gfc_tree_array_size, gfc_full_array_size): Update
	for GFC_TYPE_ARRAY_AKIND change.
	(gfc_conv_expr_descriptor): Likewise; permit calling with tree code.
	* trans-expr.cc (VTABLE_CALLBACK_FIELD): Add.
	(VTAB_GET_FIELD_GEN): Use it.
	(VTABLE_DEALLOCATE_FIELD): Undef at the end.
	(gfc_conv_expr_reference): Fixes; avoid unneccessary temp var.
	* trans-intrinsic.cc (gfc_conv_intrinsic_sizeof,
	gfc_conv_associated): Fix class and comp-ref handling.
	(conv_isocbinding_function): Remove buggy code.
	* trans-openmp.ccc (gfc_has_alloc_comps): Add ptr_ok arg.
	(gfc_omp_private_outer_ref, gfc_walk_alloc_comps,
	gfc_omp_clause_default_ctor, gfc_omp_clause_copy_ctor,
	gfc_omp_clause_assign_op, gfc_omp_clause_dtor,
	(gfc_omp_finish_clause): Update call.
	(GFC_MAP_TOKEN_DATA, GFC_MAP_TOKEN_SIZES, GFC_MAP_TOKEN_KINDS,
	GFC_MAP_TOKEN_DATA_OFFSET, GFC_MAP_TOKEN_OFFSET,
	GFC_MAP_TOKEN_FLAGS, GFC_MAP_TOKEN_DETACH): Define.
	(gfc_omp_get_token_data, gfc_omp_get_token_sizes,
	gfc_omp_get_token_kinds, gfc_omp_get_token_offset_data,
	gfc_omp_get_token_offset, gfc_omp_get_token_flags,
	gfc_omp_get_token_detach, gfc_omp_get_map_token_type,
	gfc_omp_get_cb_type, gfc_omp_gen_deep_map_fn,
	gfc_omp_deep_mapping_map, gfc_omp_deep_mapping_item,
	gfc_omp_deep_mapping_comps, gfc_omp_gen_simple_loop,
	gfc_omp_get_array_size, gfc_omp_elmental_loop,
	gfc_omp_deep_map_kind_p, gfc_omp_deep_mapping_int_p,
	gfc_omp_deep_mapping_p, gfc_omp_deep_mapping_do),
	gfc_omp_deep_mapping_cnt, gfc_omp_deep_mapping): New.
	(gfc_trans_omp_array_section): Save clause decl to survive gimplifying.
	(gfc_trans_omp_clauses): Likewise; fixes.
	* trans-types.cc (gfc_build_array_type, gfc_get_derived_type,
	gfc_get_array_descr_info): Update array kind to distinguish
	different assumed-rank arrays.
	* trans.h (gfc_class_vtab_callback_get, gfc_omp_deep_mapping_p,
	gfc_omp_deep_mapping_cnt, gfc_omp_deep_mapping): New prototypes.
	(enum gfc_array_kind): Additional GFC_ARRAY_ASSUMED_RANK_* entries.

2022-02-11  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* decl.cc (gfc_match_end): Search for first previous state that is not
	COMP_OMP_METADIRECTIVE.
	* gfortran.h (gfc_skip_omp_metadirective_clause): Add prototype.
	* openmp.cc (match_omp_metadirective): Skip clause if
	result of gfc_skip_omp_metadirective_clause is true.
	* trans-openmp.ccc (gfc_trans_omp_set_selector): Add argument and
	disable expression conversion if false.
	(gfc_skip_omp_metadirective_clause): New.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* openmp.cc (omp_target_device_selectors): New.
	(gfc_match_omp_context_selector): Accept 'target_device' selector set.
	Treat 'device_num' selector as expression.
	(gfc_match_omp_context_selector_specification): Handle 'target_device'
	selector set.
	* types.def (BT_FN_BOOL_INT_CONST_PTR_CONST_PTR_CONST_PTR): New type.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* decl.cc (gfc_match_end): Handle COMP_OMP_METADIRECTIVE and
	COMP_OMP_BEGIN_METADIRECTIVE.
	* dump-parse-tree.cc (show_omp_node): Handle EXEC_OMP_METADIRECTIVE.
	(show_code_node): Handle EXEC_OMP_METADIRECTIVE.
	* gfortran.h (enum gfc_statement): Add ST_OMP_METADIRECTIVE,
	ST_OMP_BEGIN_METADIRECTIVE and ST_OMP_END_METADIRECTIVE.
	(struct gfc_omp_metadirective_clause): New structure.
	(gfc_get_omp_metadirective_clause): New macro.
	(struct gfc_st_label): Add omp_region field.
	(enum gfc_exec_op): Add EXEC_OMP_METADIRECTIVE.
	(struct gfc_code): Add omp_metadirective_clauses field.
	(gfc_free_omp_metadirective_clauses): New prototype.
	(match_omp_directive): New prototype.
	(is_omp_declarative_stmt): New prototype.
	* io.cc (format_asterisk): Initialize omp_region field.
	* match.h (gfc_match_omp_begin_metadirective): New prototype.
	(gfc_match_omp_metadirective): New prototype.
	* openmp.cc (gfc_match_omp_eos): Match ')' in context selectors.
	(gfc_free_omp_metadirective_clauses): New.
	(gfc_match_omp_clauses): Remove context_selector argument.  Rely on
	gfc_match_omp_eos to match end of clauses.
	(match_omp): Remove extra argument to gfc_match_omp_clauses.
	(gfc_match_omp_context_selector): Remove extra argument to
	gfc_match_omp_clauses.  Set gfc_matching_omp_context_selector
	before call to gfc_match_omp_clauses and reset after.
	(gfc_match_omp_context_selector_specification): Modify to take a
	gfc_omp_set_selector** argument.
	(gfc_match_omp_declare_variant): Pass set_selectors to
	gfc_match_omp_context_selector_specification.
	(match_omp_metadirective): New.
	(gfc_match_omp_begin_metadirective): New.
	(gfc_match_omp_metadirective): New.
	(resolve_omp_metadirective): New.
	(gfc_resolve_omp_directive): Handle EXEC_OMP_METADIRECTIVE.
	* parse.cc (gfc_matching_omp_context_selector): New variable.
	(gfc_in_metadirective_body): New variable.
	(gfc_omp_region_count): New variable.
	(decode_omp_directive): Match 'begin metadirective',
	'end metadirective' and 'metadirective'.
	(match_omp_directive): New.
	(case_omp_structured_block): New.
	(case_omp_do): New.
	(gfc_ascii_statement): Handle metadirective statements.
	(gfc_omp_end_stmt): New.
	(parse_omp_do): Delegate to gfc_omp_end_stmt.
	(parse_omp_structured_block): Delegate to gfc_omp_end_stmt. Handle
	ST_OMP_END_METADIRECTIVE.
	(parse_omp_metadirective_body): New.
	(parse_executable): Delegate to case_omp_structured_block and
	case_omp_do.  Return after one statement if compiling regular
	metadirective.  Handle metadirective statements.
	(gfc_parse_file): Reset gfc_omp_region_count,
	gfc_in_metadirective_body and gfc_matching_omp_context_selector.
	(is_omp_declarative_stmt): New.
	* parse.h (enum gfc_compile_state): Add COMP_OMP_METADIRECTIVE and
	COMP_OMP_BEGIN_METADIRECTIVE.
	(gfc_omp_end_stmt): New prototype.
	(gfc_matching_omp_context_selector): New declaration.
	(gfc_in_metadirective_body): New declaration.
	(gfc_omp_region_count): New declaration.
	* resolve.cc (gfc_resolve_code): Handle EXEC_OMP_METADIRECTIVE.
	* st.cc (gfc_free_statement): Handle EXEC_OMP_METADIRECTIVE.
	* symbol.cc (compare_st_labels): Take omp_region into account.
	(gfc_get_st_labels): Incorporate omp_region into label.
	* trans-decl.ccc (gfc_get_label_decl): Add omp_region into translated
	label name.
	* trans-openmp.ccc (gfc_trans_omp_directive): Handle
	EXEC_OMP_METADIRECTIVE.
	(gfc_trans_omp_set_selector): Hoist code from...
	(gfc_trans_omp_declare_variant): ...here.
	(gfc_trans_omp_metadirective): New.
	* trans-stmt.h (gfc_trans_omp_metadirective): New prototype.
	* trans.cc (trans_code): Handle EXEC_OMP_METADIRECTIVE.

2021-11-16  Sandra Loosemore <sandra@codesourcery.com>
	    Tobias Burnus  <tobias@codesourcery.com>

	* lang.opt (-param=delinearize=): New.
	* trans-array.cc (get_class_array_vptr): New, split from...
	(build_array_ref): ...here.
	(get_array_lbound, get_array_ubound): New, split from...
	(gfc_conv_array_ref): ...here.  Additional code refactoring
	plus support for delinearization of the array access.

2020-08-22  Sandra Loosemore  <sandra@codesourcery.com>

	Permit calls to Fortran intrinsics when annotating loops in
	kernels regions.

	* openmp.cc (check_expr_for_invalid_calls): Check for intrinsic
	functions.

2020-08-19  Sandra Loosemore  <sandra@codesourcery.com>

	Annotate inner loops in "acc kernels loop" directives (Fortran).

	* openmp.cc (annotate_do_loops_in_kernels): Handle
	EXEC_OACC_KERNELS_LOOP separately to permit annotation of inner
	loops in a combined "acc kernels loop" directive.

2020-08-19  Sandra Loosemore  <sandra@codesourcery.com>

	Add a "combined" flag for "acc kernels loop" etc directives.

	* trans-openmp.cc (gfc_trans_omp_do): Add combined parameter,
	use it to set OACC_LOOP_COMBINED.  Update all call sites.

2020-03-27  Sandra Loosemore  <sandra@codesourcery.com>
	    Gergö Barany <gergo@codesourcery.com>

	* gfortran.h (gfc_oacc_annotate_loops_in_kernels_regions): Declare.
	* lang.opt (Wopenacc-kernels-annotate-loops): New.
	(fopenacc-kernels-annotate-loops): New.
	* openmp.cc: Include options.h.
	(enum annotation_state, enum annotation_result): New.
	(check_code_for_invalid_calls): New.
	(check_expr_for_invalid_calls): New.
	(check_for_invalid_calls): New.
	(annotate_do_loop): New.
	(annotate_do_loops_in_kernels): New.
	(compute_goto_targets): New.
	(gfc_oacc_annotate_loops_in_kernels_regions): New.
	* parse.cc (gfc_parse_file): Handle -fopenacc-kernels-annotate-loops.

2020-02-19  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.ccc (gfc_omp_check_optional_argument): Handle non-decl
	case.

2018-10-04  Cesar Philippidis  <cesar@codesourcery.com>
	    Julian Brown  <julian@codesourcery.com>

	* gfortran.h (enum gfc_omp_map_op): Add OMP_MAP_DECLARE_ALLOCATE,
	OMP_MAP_DECLARE_DEALLOCATE.
	(gfc_omp_clauses): Add update_allocatable.
	* trans-array.c (gfc_array_allocate): Call
	gfc_trans_oacc_declare_allocate for decls that have oacc_declare_create
	attribute set.
	* trans-decl.c (find_module_oacc_declare_clauses): Relax oacc_declare_create to
	OMP_MAP_ALLOC, and oacc_declare_copyin to OMP_MAP_TO, in order to
	match OpenACC 2.5 semantics.
	* trans-openmp.c (gfc_trans_omp_clauses): Use GOMP_MAP_ALWAYS_POINTER
	(for update directive) or GOMP_MAP_FIRSTPRIVATE_POINTER (otherwise) for
	allocatable scalar decls.  Handle OMP_MAP_DECLARE_{ALLOCATE,DEALLOCATE}
	clauses.
	(gfc_trans_oacc_executable_directive): Use GOMP_MAP_ALWAYS_POINTER
	for allocatable scalar data clauses inside acc update directives.
	(gfc_trans_oacc_declare_allocate): New function.
	* trans-stmt.c (gfc_trans_allocate): Call
	gfc_trans_oacc_declare_allocate for decls with oacc_declare_create
	attribute set.
	(gfc_trans_deallocate): Likewise.
	* trans.h (gfc_trans_oacc_declare_allocate): Declare.

2019-07-10  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.cc (gfc_omp_finish_clause): Change clauses mapping
	assumed-size arrays to use the GOMP_MAP_FORCE_PRESENT map type.

2019-05-19  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.cc (gfc_omp_finish_clause): Guard addition of clauses for
	pointers with DECL_P.

2018-12-13  Cesar Philippidis  <cesar@codesourcery.com>
	    Nathan Sidwell  <nathan@acm.org>
	    Julian Brown  <julian@codesourcery.com>

	* openmp.cc (oacc_is_parallel): New.
	(resolve_oacc_loop_blocks): Emit an error on orphan OpenACC
	gang reductions.
	* trans-openmp.ccc (gfc_omp_clause_copy_ctor): Permit reductions.

2018-06-29  Cesar Philippidis  <cesar@codesourcery.com>
	    James Norris  <jnorris@codesourcery.com>

	* openmp.cc (resolve_positive_int_expr): Promote the warning to an
	error.

2020-04-19  Chung-Lin Tang  <cltang@codesourcery.com>

	PR other/76739

	* f95-lang.cc (DEF_FUNCTION_TYPE_VAR_5): New symbol.
	* types.def (BT_FN_VOID_INT_SIZE_PTR_PTR_PTR_VAR): New type.
