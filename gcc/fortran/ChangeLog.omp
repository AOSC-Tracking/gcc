2023-02-15  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2023-02-15  Tobias Burnus  <tobias@codesourcery.com>

	PR fortran/108512
	* openmp.cc (gfc_resolve_omp_parallel_blocks): Handle combined 'loop'
	directives.
	(gfc_resolve_do_iterator): Set a source location for added
	'private'-clause arguments.
	* resolve.cc (gfc_resolve_code): Call gfc_resolve_omp_do_blocks
	also for EXEC_OMP_LOOP and gfc_resolve_omp_parallel_blocks for
	combined directives with loop + '{masked,master} taskloop (simd)'.

2023-02-14  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* dump-parse-tree.cc (show_omp_namelist): Display 'present' map
	modifier.
	(show_omp_clauses): Display 'present' motion modifier for 'to'
	and 'from' clauses.

2023-02-09  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* gfortran.h (enum gfc_omp_map_op): Add entries with 'present'
	modifiers.
	(enum gfc_omp_motion_modifier): New.
	(struct gfc_omp_namelist): Add motion_modifier field.
	* openmp.cc (gfc_match_omp_variable_list): Add new parameter with
	default.  Parse 'present' motion modifier and apply.
	(gfc_match_omp_clauses): Parse 'present' in defaultmap, 'from'
	clauses, 'map' clauses and 'to' clauses.
	(resolve_omp_clauses): Allow 'present' modifiers on 'target',
	'target data', 'target enter' and 'target exit' directives.
	* trans-openmp.cc (gfc_trans_omp_clauses): Apply 'present' modifiers
	to tree node for 'map', 'to' and 'from' clauses.  Apply 'present' for
	defaultmap.

2023-02-09  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2023-02-09  Tobias Burnus  <tobias@codesourcery.com>

	PR fortran/107424
	* trans-openmp.cc (struct dovar_init_d): Add 'sym' and
	'non_unit_incr' members.
	(gfc_nonrect_loop_expr): New.
	(gfc_trans_omp_do): Call it; use normal loop bounds
	for unit stride - and only create local loop var.

2023-02-09  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2023-02-09  Tobias Burnus  <tobias@codesourcery.com>

	* parse.cc (decode_omp_directive): Really ignore 'assumes' with
	-fopenmp-simd.

2023-02-01  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2023-01-23  Tobias Burnus  <tobias@codesourcery.com>

	* openmp.cc (resolve_omp_clauses): Check also for
	power of two.

2023-01-16  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2023-01-12  Tobias Burnus  <tobias@codesourcery.com>

	PR fortran/107706
	* openmp.cc (gfc_resolve_omp_assumptions): Reject nonscalars.

2022-12-21  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2022-12-14  Julian Brown  <julian@codesourcery.com>

	PR fortran/107214
	* gfortran.h (gfc_symbol): Add data_mark, dev_mark, gen_mark and
	reduc_mark bitfields.
	* openmp.cc (resolve_omp_clauses): Use above bitfields to improve
	duplicate clause detection.

2022-12-21  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2022-12-14  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.cc (gfc_add_firstprivate_if_unmapped): New function.
	(gfc_split_omp_clauses): Call above.

2022-12-12  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2022-12-09  Tobias Burnus  <tobias@codesourcery.com>

	* dump-parse-tree.cc (show_omp_namelist): Improve OMP_LIST_ALLOCATE
	output.
	* gfortran.h (struct gfc_omp_namelist): Add 'align' to 'u'.
	(gfc_free_omp_namelist): Add bool arg.
	* match.cc (gfc_free_omp_namelist): Likewise; free 'u.align'.
	* openmp.cc (gfc_free_omp_clauses, gfc_match_omp_clause_reduction,
	gfc_match_omp_flush): Update call.
	(gfc_match_omp_clauses): Match 'align/allocate modifers in
	'allocate' clause.
	(resolve_omp_clauses): Resolve align.
	* st.cc (gfc_free_statement): Update call
	* trans-openmp.cc (gfc_trans_omp_clauses): Handle 'align'.

2022-11-28  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2022-11-28  Tobias Burnus  <tobias@codesourcery.com>

	* openmp.cc (OMP_DO_CLAUSES, OMP_SCOPE_CLAUSES,
	OMP_SECTIONS_CLAUSES): Add 'nowait'.
	(OMP_SINGLE_CLAUSES): Add 'nowait' and 'copyprivate'.
	(gfc_match_omp_distribute_parallel_do,
	gfc_match_omp_distribute_parallel_do_simd,
	gfc_match_omp_parallel_do,
	gfc_match_omp_parallel_do_simd,
	gfc_match_omp_parallel_sections,
	gfc_match_omp_teams_distribute_parallel_do,
	gfc_match_omp_teams_distribute_parallel_do_simd): Disallow 'nowait'.
	(gfc_match_omp_workshare): Match 'nowait' clause.
	(gfc_match_omp_end_single): Use clause matcher for 'nowait'.
	(resolve_omp_clauses): Reject 'nowait' + 'copyprivate'.
	* parse.cc (decode_omp_directive): Break too long line.
	(parse_omp_do, parse_omp_structured_block): Diagnose duplicated
	'nowait' clause.

2022-11-04  Tobias Burnus  <tobias@codesourcery.com>

	Partial Revert:
	2022-11-02  Tobias Burnus  <tobias@codesourcery.com>

	* openmp.cc (resolve_omp_clauses):Accept noncontiguous arrays.

2022-11-02  Tobias Burnus  <tobias@codesourcery.com>

	* trans-openmp.cc (gfc_trans_omp_clauses): Ensure DT struct-comp with
	array descriptor and 'alloc:' have the descriptor mapped with 'to:'.

2022-11-02  Tobias Burnus  <tobias@codesourcery.com>

	* openmp.cc (gfc_match_omp_clauses): Permit derived types.
	(resolve_omp_clauses):Accept noncontiguous
	arrays.
	* trans-openmp.cc (gfc_trans_omp_clauses): Fixes for
	derived-type changes; fix size for scalars.

2022-10-27  Marcel Vollweiler  <marcel@codesourcery.com>

	* openmp.cc (oacc_is_parallel): Remove.
	(resolve_oacc_loop_blocks): Remove "gang reduction on an orphan loop"
	checking.

2022-10-19  Tobias Burnus  <tobias@codesourcery.com>

	* trans-array.cc (non_negative_strides_array_p): Fix handling
	of GFC_DECL_SAVED_DESCRIPTOR.
	(gfc_conv_array_ref): Use ARRAY_REF again when possible.

2022-10-17  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-10-17  Tobias Burnus  <tobias@codesourcery.com>

	PR fortran/107266
	* trans-expr.cc (gfc_conv_string_parameter): Use passed
	type to honor character kind.
	* trans-types.cc (gfc_sym_type): Honor character kind.
	* trans-decl.cc (gfc_conv_cfi_to_gfc): Fix handling kind=4
	character strings.

2022-10-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-10-05  Tobias Burnus  <tobias@codesourcery.com>

	* dump-parse-tree.cc (show_omp_assumes): New.
	(show_omp_clauses, show_namespace): Call it.
	(show_omp_node, show_code_node): Handle OpenMP ASSUME.
	* gfortran.h (enum gfc_statement): Add ST_OMP_ASSUME,
	ST_OMP_END_ASSUME, ST_OMP_ASSUMES and ST_NOTHING.
	(gfc_exec_op): Add EXEC_OMP_ASSUME.
	(gfc_omp_assumptions): New struct.
	(gfc_get_omp_assumptions): New XCNEW #define.
	(gfc_omp_clauses, gfc_namespace): Add assume member.
	(gfc_resolve_omp_assumptions): New prototype.
	* match.h (gfc_match_omp_assume, gfc_match_omp_assumes): New.
	* openmp.cc (omp_code_to_statement): Forward declare.
	(enum gfc_omp_directive_kind, struct gfc_omp_directive): New.
	(gfc_free_omp_clauses): Free assume member and its struct data.
	(enum omp_mask2): Add OMP_CLAUSE_ASSUMPTIONS.
	(gfc_omp_absent_contains_clause): New.
	(gfc_match_omp_clauses): Call it; optionally use passed
	omp_clauses argument.
	(omp_verify_merge_absent_contains, gfc_match_omp_assume,
	gfc_match_omp_assumes, gfc_resolve_omp_assumptions): New.
	(resolve_omp_clauses): Call the latter.
	(gfc_resolve_omp_directive, omp_code_to_statement): Handle
	EXEC_OMP_ASSUME.
	* parse.cc (decode_omp_directive): Parse OpenMP ASSUME(S).
	(next_statement, parse_executable, parse_omp_structured_block):
	Handle ST_OMP_ASSUME.
	(case_omp_decl): Add ST_OMP_ASSUMES.
	(gfc_ascii_statement): Handle Assumes, optional return
	string without '!$OMP '/'!$ACC ' prefix.
	* parse.h (gfc_ascii_statement): Add optional bool arg to prototype.
	* resolve.cc (gfc_resolve_blocks, gfc_resolve_code): Add
	EXEC_OMP_ASSUME.
	(gfc_resolve): Resolve ASSUMES directive.
	* symbol.cc (gfc_free_namespace): Free omp_assumes member.
	* st.cc (gfc_free_statement): Handle EXEC_OMP_ASSUME.
	* trans-openmp.cc (gfc_trans_omp_directive): Likewise.
	* trans.cc (trans_code): Likewise.

2022-10-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-10-04  Tobias Burnus  <tobias@codesourcery.com>

	* parse.cc (decode_omp_directive): Handle '(end) loop' and 'scan'
	also with -fopenmp-simd.

2022-09-30  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-09-30  Tobias Burnus  <tobias@codesourcery.com>

	PR fortran/105318
	* openmp.cc (resolve_omp_clauses): Update is_device_ptr restrictions
	for OpenMP 5.1 and map to has_device_addr where applicable; map
	use_device_ptr to use_device_addr where applicable.
	Silence integer-range warning for device(omp_{initial,invalid}_device).

2022-09-28  Paul-Antoine Arras  <pa@codesourcery.com>

	* parse.cc (gfc_ascii_statement): Missing $ in !$OMP END METADIRECTIVE.
	(parse_omp_structured_block): Fix handling of OMP end metadirective.
	(parse_omp_metadirective_body): Reject OMP end statements
	at the end of an OMP metadirective.

2022-09-23  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-09-20  Tobias Burnus  <tobias@codesourcery.com>

	PR fortran/104143
	* interface.cc (compare_parameter): Permit scalar args to
	'type(*), dimension(*)'.

2022-09-09  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-09-08  Tobias Burnus  <tobias@codesourcery.com>

	PR fortran/106670
	* scanner.cc (skip_fixed_omp_sentinel): Add -Wsurprising warning
	for 'omx' sentinels with -fopenmp.
	* invoke.texi (-Wsurprising): Document additional warning case.

2022-09-06  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-09-06  Tobias Burnus  <tobias@codesourcery.com>

	* openmp.cc (resolve_omp_clauses): Remove ordered/linear
	check as it is handled now in the middle end.

2022-09-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-09-05  Tobias Burnus  <tobias@codesourcery.com>

	* dump-parse-tree.cc (show_omp_namelist, show_omp_clauses): Handle
	omp_cur_iteration and distinguish doacross/depend.
	* gfortran.h (enum gfc_omp_depend_doacross_op): Renamed from
	gfc_omp_depend_op.
	(enum gfc_omp_depend_doacross_op): Add OMP_DOACROSS_SINK_FIRST,
	Rename OMP_DEPEND_SINK to OMP_DOACROSS_SINK.
	(gfc_omp_namelist) Handle renaming, rename depend_op to
	depend_doacross_op.
	(struct gfc_omp_clauses): Add doacross_source.
	* openmp.cc (gfc_match_omp_depend_sink): Renamed to ...
	(gfc_match_omp_doacross_sink): ... this; handle omp_all_memory.
	(enum omp_mask2): Add OMP_CLAUSE_DOACROSS.
	(gfc_match_omp_clauses): Handle 'doacross' and syntax changes to
	depend.
	(gfc_match_omp_depobj): Simplify as sink/source are now impossible.
	(gfc_match_omp_ordered_depend): Request OMP_CLAUSE_DOACROSS.
	(resolve_omp_clauses): Update sink/source checks.
	(gfc_resolve_omp_directive): Resolve EXEC_OMP_ORDERED clauses.
	* parse.cc (decode_omp_directive): Handle 'ordered doacross'.
	* trans-openmp.cc (gfc_trans_omp_clauses): Handle doacross.
	(gfc_trans_omp_do): Fix OMP_FOR_ORIG_DECLS handling if 'ordered'
	clause is present.
	(gfc_trans_omp_depobj): Update for member name change.

2022-09-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-09-03  Jakub Jelinek  <jakub@redhat.com>

	* trans-openmp.cc (gfc_trans_omp_clauses): Use
	OMP_CLAUSE_DOACROSS_SINK_NEGATIVE instead of
	OMP_CLAUSE_DEPEND_SINK_NEGATIVE, build OMP_CLAUSE_DOACROSS
	clause instead of OMP_CLAUSE_DEPEND and set OMP_CLAUSE_DOACROSS_DEPEND
	on it.

2022-08-30  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-05-27  Tobias Burnus  <tobias@codesourcery.com>
		    Chung-Lin Tang  <cltang@codesourcery.com>

	* openmp.cc (gfc_check_omp_requires): Fix clause name in error.

2022-08-23  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-08-17  Tobias Burnus  <tobias@codesourcery.com>

	PR fortran/106566
	* openmp.cc (gfc_match_omp_clauses): Fix setting linear-step value
	to 1 when not specified.
	(gfc_match_omp_declare_simd): Accept module procedures.

2022-07-29  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-07-29  Tobias Burnus  <tobias@codesourcery.com>

	* openmp.cc (resolve_omp_clauses): Permit assumed-size arrays
	in uniform clause.

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-07-04  Tobias Burnus  <tobias@codesourcery.com>
		    Chung-Lin Tang  <cltang@codesourcery.com>
		    Thomas Schwinge  <thomas@codesourcery.com>

	* openmp.cc (gfc_match_omp_requires): Remove sorry.
	* parse.cc (decode_omp_directive): Don't regard 'declare target'
	as target usage for 'omp requires'; add more flags to
	omp_requires_mask.

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-07-04  Tobias Burnus  <tobias@codesourcery.com>
		    Jakub Jelinek  <jakub@redhat.com>

	* gfortran.h (gfc_omp_namelist): Update by creating 'linear' struct,
	move 'linear_op' as 'op' to id and add 'old_modifier' to it.
	* dump-parse-tree.cc (show_omp_namelist): Update accordingly.
	* module.cc (mio_omp_declare_simd): Likewise.
	* trans-openmp.cc (gfc_trans_omp_clauses): Likewise.
	* openmp.cc (resolve_omp_clauses): Likewise; accept new-style
	'val' modifier with do/simd.
	(gfc_match_omp_clauses): Handle OpenMP 5.2 linear clause syntax.

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-07-01  Tobias Burnus  <tobias@codesourcery.com>

	* dump-parse-tree.cc (show_omp_namelist): For the map-type,
	also handle the always modifer and release/delete.
	* openmp.cc (resolve_omp_clauses): Accept tofrom
	map-type modifier for target enter/exit data,
	but use 'to' / 'from' internally.

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-06-08  Tobias Burnus  <tobias@codesourcery.com>

	* openmp.cc (gfc_match_omp_clauses): Check also parent namespace
	for 'requires reverse_offload'.

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-06-07  Jakub Jelinek  <jakub@redhat.com>

	* trans-openmp.cc (gfc_trans_omp_clauses): Set
	OMP_CLAUSE_LINEAR_OLD_LINEAR_MODIFIER on OMP_CLAUSE_LINEAR
	clauses unconditionally for now.

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-06-03  Tobias Burnus  <tobias@codesourcery.com>

	* openmp.cc (OMP_SCOPE_CLAUSES): Add firstprivate and allocate.

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-05-28  Tobias Burnus  <tobias@codesourcery.com>

	* dump-parse-tree.cc (show_omp_clauses): Handle OMP_LIST_ENTER.
	* gfortran.h: Add OMP_LIST_ENTER.
	* openmp.cc (enum omp_mask2, OMP_DECLARE_TARGET_CLAUSES): Add
	OMP_CLAUSE_ENTER.
	(gfc_match_omp_clauses, gfc_match_omp_declare_target,
	resolve_omp_clauses): Handle 'enter' clause.

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-05-24  Tobias Burnus  <tobias@codesourcery.com>

	PR c/105378
	* openmp.cc (gfc_match_omp_taskwait): Accept nowait.

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-05-18  Tobias Burnus  <tobias@codesourcery.com>

	* gfortran.h (enum gfc_omp_depend_op): Add OMP_DEPEND_INOUTSET.
	(gfc_omp_clauses): Enlarge ENUM_BITFIELD.
	* dump-parse-tree.cc (show_omp_namelist, show_omp_clauses): Handle
	'inoutset' depend modifier.
	* openmp.cc (gfc_match_omp_clauses, gfc_match_omp_depobj): Likewise.
	* trans-openmp.cc (gfc_trans_omp_clauses, gfc_trans_omp_depobj):
	Likewise.

2022-07-04  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-05-17  Tobias Burnus  <tobias@codesourcery.com>

	* trans-openmp.cc (gfc_trans_omp_clauses): When mapping nondescriptor
	array sections, use GOMP_MAP_FIRSTPRIVATE_POINTER instead of
	GOMP_MAP_POINTER for the pointer attachment.

	* dump-parse-tree.cc (show_omp_namelist): Handle omp_all_memory.
	* openmp.cc (gfc_match_omp_variable_list, gfc_match_omp_depend_sink,
	gfc_match_omp_clauses, resolve_omp_clauses): Likewise.
	* trans-openmp.cc (gfc_trans_omp_clauses, gfc_trans_omp_depobj):
	Likewise.
	* resolve.cc (resolve_symbol): Reject it as symbol.

2022-07-04  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-05-13  Tobias Burnus  <tobias@codesourcery.com>

	* trans-openmp.cc (gfc_trans_omp_clauses): When mapping nondescriptor
	array sections, use GOMP_MAP_FIRSTPRIVATE_POINTER instead of
	GOMP_MAP_POINTER for the pointer attachment.

2022-06-30  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* openmp.cc (gfc_resolve_omp_allocate): Initialize tail to NULL.

2022-05-22  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* trans-array.cc (gfc_conv_array_ref): Update arguments to
	gfc_build_array_ref.

2022-05-05  Sandra Loosemore  <sandra@codesourcery.com>

	Backport from mainline:
	2022-05-05  Sandra Loosemore  <sandra@codesourcery.com>

	* gfortran.h (struct gfc_omp_clauses): Add non_rectangular bit.
	* openmp.cc (is_outer_iteration_variable): New function.
	(expr_is_invariant): New function.
	(bound_expr_is_canonical): New function.
	(resolve_omp_do): Replace existing non-rectangularity error with
	check for canonical form and setting non_rectangular bit.
	* trans-openmp.cc (gfc_trans_omp_do): Transfer non_rectangular
	flag to generated tree structure.

2022-03-24  Sandra Loosemore  <sandra@codesourcery.com>

	Backport from mainline:

	2022-03-24  Sandra Loosemore  <sandra@codesourcery.com>

	* trans-openmp.cc (gfc_trans_omp_critical): Set location on OMP
	tree node.
	(gfc_trans_omp_do): Likewise.
	(gfc_trans_omp_masked): Likewise.
	(gfc_trans_omp_do_simd): Likewise.
	(gfc_trans_omp_scope): Likewise.
	(gfc_trans_omp_taskgroup): Likewise.
	(gfc_trans_omp_taskwait): Likewise.
	(gfc_trans_omp_distribute): Likewise.
	(gfc_trans_omp_taskloop): Likewise.
	(gfc_trans_omp_master_masked_taskloop): Likewise.

2022-06-17  Chung-Lin Tang  <cltang@codesourcery.com>

	Backport from mainline:
	2022-06-17  Chung-Lin Tang  <cltang@codesourcery.com>

	* gfortran.h (struct gfc_omp_namelist): Add memspace_sym, traits_sym
	fields.
	(OMP_LIST_USES_ALLOCATORS): New list enum.
	* openmp.cc (enum omp_mask2): Add OMP_CLAUSE_USES_ALLOCATORS.
	(gfc_match_omp_clause_uses_allocators): New function.
	(gfc_match_omp_clauses): Add case to handle OMP_CLAUSE_USES_ALLOCATORS.
	(OMP_TARGET_CLAUSES): Add OMP_CLAUSE_USES_ALLOCATORS.
	(resolve_omp_clauses): Add "USES_ALLOCATORS" to clause_names[].
	* dump-parse-tree.cc (show_omp_namelist): Handle OMP_LIST_USES_ALLOCATORS.
	(show_omp_clauses): Likewise.
	* trans-array.cc (gfc_conv_array_initializer): Adjust array index
	to always be a created tree expression instead of NULL_TREE when zero.
	* trans-openmp.cc (gfc_trans_omp_clauses): For ALLOCATE clause, handle
	using gfc_trans_omp_variable for EXPR_VARIABLE exprs.
	Add handling of OMP_LIST_USES_ALLOCATORS case.
	* types.def (BT_FN_VOID_PTRMODE): Define.
	(BT_FN_PTRMODE_PTRMODE_INT_PTR): Define.

2022-05-23  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-05-23  Tobias Burnus  <tobias@codesourcery.com>

	PR fortran/104949
	* f95-lang.cc (LANG_HOOKS_OMP_ARRAY_SIZE): Redefine.
	* trans-openmp.cc (gfc_omp_array_size): New.
	(gfc_trans_omp_variable_list): Never turn has_device_addr
	to firstprivate.
	* trans.h (gfc_omp_array_size): New.

2022-05-12  Tobias Burnus  <tobias@codesourcery.com>

	* trans-array.cc (gfc_scalar_elemental_arg_saved_as_reference):
	Return true for attr.proc_pointer expressions.

2022-04-27  Tobias Burnus <tobias@codesourcery.com>

	* resolve.cc (gfc_resolve_finalizers): Remove
	gfc_resolve_finalizers calls, use gfc_is_finalizable.
	(resolve_fl_derived): Resolve derived-type components
	first.

2022-04-25  Tobias Burnus  <tobias@codesourcery.com>

	* resolve.cc (gfc_resolve_finalizers): Also resolve allocatable comps.

2022-04-20  Andrew Stubbs  <ams@codesourcery.com>

	* openmp.cc (gfc_match_omp_requires): Check requires unified_address
	for conflict with -foffload-memory=shared.

2022-03-10  Andrew Stubbs <ams@codesourcery.com>

	Backport of the patch posted at
	https://gcc.gnu.org/pipermail/gcc-patches/2022-March/591351.html

	* openmp.cc (gfc_match_omp_requires): Check compatibility of
	-foffload-memory option with requires directive.

2022-03-09  Abid Qadeer  <abidh@codesourcery.com>

	Backport of a patch posted at
	https://gcc.gnu.org/pipermail/gcc-patches/2022-January/588370.html

	* gfortran.h (struct access_ref): Declare new members
	omp_allocated and omp_allocated_end.
	* openmp.cc (gfc_match_omp_allocate): Set new_st.resolved_sym to
	NULL.
	(prepare_omp_allocated_var_list_for_cleanup): New function.
	(gfc_resolve_omp_allocate): Call it.
	* trans-decl.cc (gfc_trans_deferred_vars): Process omp_allocated.
	* trans-openmp.ccc (gfc_trans_omp_allocate): Set kind for the stmt
	generated for allocate directive.

2022-03-09  Abid Qadeer  <abidh@codesourcery.com>

	Backport of a patch posted at
	https://gcc.gnu.org/pipermail/gcc-patches/2022-January/588369.html

	* trans-openmp.cc (gfc_trans_omp_clauses): Handle OMP_LIST_ALLOCATOR.
	(gfc_trans_omp_allocate): New function.
	(gfc_trans_omp_directive): Handle EXEC_OMP_ALLOCATE.

2022-03-09  Abid Qadeer  <abidh@codesourcery.com>

	Backport of a patch posted at
	https://gcc.gnu.org/pipermail/gcc-patches/2022-January/588368.html

	* dump-parse-tree.cc (show_omp_node): Handle EXEC_OMP_ALLOCATE.
	(show_code_node): Likewise.
	* gfortran.h (enum gfc_statement): Add ST_OMP_ALLOCATE.
	(OMP_LIST_ALLOCATOR): New enum value.
	(enum gfc_exec_op): Add EXEC_OMP_ALLOCATE.
	* match.h (gfc_match_omp_allocate): New function.
	* openmp.cc (enum omp_mask1): Add OMP_CLAUSE_ALLOCATOR.
	(OMP_ALLOCATE_CLAUSES): New define.
	(gfc_match_omp_allocate): New function.
	(resolve_omp_clauses): Add ALLOCATOR in clause_names.
	(omp_code_to_statement): Handle EXEC_OMP_ALLOCATE.
	(EMPTY_VAR_LIST): New define.
	(check_allocate_directive_restrictions): New function.
	(gfc_resolve_omp_allocate): Likewise.
	(gfc_resolve_omp_directive): Handle EXEC_OMP_ALLOCATE.
	* parse.cc (decode_omp_directive): Handle ST_OMP_ALLOCATE.
	(next_statement): Likewise.
	(gfc_ascii_statement): Likewise.
	* resolve.cc (gfc_resolve_code): Handle EXEC_OMP_ALLOCATE.
	* st.cc (gfc_free_statement): Likewise.
	* trans.cc (trans_code): Likewise

2022-03-08  Abid Qadeer  <abidh@codesourcery.com>

	* parse.cc (gfc_parse_file): Set OMP_REQUIRES_DYNAMIC_ALLOCATORS
	bit in omp_requires_mask.

2022-03-01  Tobias Burnus  <tobias@codesourcery.com>

	* class.cc (finalization_scalarizer): Mark syms as artificial.
	(generate_callback_wrapper): New.
	(gfc_find_derived_vtab): Call it, add _callback comp.
	* f95-lang.cc (LANG_HOOKS_OMP_DEEP_MAPPING,
	LANG_HOOKS_OMP_DEEP_MAPPING_P,
	LANG_HOOKS_OMP_DEEP_MAPPING_CNT): Redeinfe
	* gfortran.h (gfc_import_iso_c_binding_module,
	GFC_CLASS_CALLBACK_DEFAULT_FLAG, GFC_CLASS_CALLBACK_VTABLE_FLAG,
	GFC_CLASS_CB_ALLOCATABLE, GFC_CLASS_CB_POINTER,
	GFC_CLASS_CB_PROC_POINTER, GFC_CLASS_CB_VTABLE,
	GFC_CLASS_CB_VPTR): New.
	* match.cc (select_type_set_tmp): Propagate allocatable property.
	* module.cc (MOD_VERSION): Bump due to vtab change.
	(import_iso_c_binding_module): New import_all arg.
	(gfc_import_iso_c_binding_module): New.
	(gfc_use_module): Update call.
	* openmp.cc (resolve_omp_clauses): Accept DT with alloc comps.
	* resolve.cc (gfc_resolve_formal_arglist, gfc_resolve_intrinsic,
	resolve_fl_procedure, resolve_types): Permit some violations
	for internal code.
	* trans-array.cc (gfc_conv_descriptor_stride_get,
	gfc_tree_array_size, gfc_full_array_size): Update
	for GFC_TYPE_ARRAY_AKIND change.
	(gfc_conv_expr_descriptor): Likewise; permit calling with tree code.
	* trans-expr.cc (VTABLE_CALLBACK_FIELD): Add.
	(VTAB_GET_FIELD_GEN): Use it.
	(VTABLE_DEALLOCATE_FIELD): Undef at the end.
	(gfc_conv_expr_reference): Fixes; avoid unneccessary temp var.
	* trans-intrinsic.cc (gfc_conv_intrinsic_sizeof,
	gfc_conv_associated): Fix class and comp-ref handling.
	(conv_isocbinding_function): Remove buggy code.
	* trans-openmp.ccc (gfc_has_alloc_comps): Add ptr_ok arg.
	(gfc_omp_private_outer_ref, gfc_walk_alloc_comps,
	gfc_omp_clause_default_ctor, gfc_omp_clause_copy_ctor,
	gfc_omp_clause_assign_op, gfc_omp_clause_dtor,
	(gfc_omp_finish_clause): Update call.
	(GFC_MAP_TOKEN_DATA, GFC_MAP_TOKEN_SIZES, GFC_MAP_TOKEN_KINDS,
	GFC_MAP_TOKEN_DATA_OFFSET, GFC_MAP_TOKEN_OFFSET,
	GFC_MAP_TOKEN_FLAGS, GFC_MAP_TOKEN_DETACH): Define.
	(gfc_omp_get_token_data, gfc_omp_get_token_sizes,
	gfc_omp_get_token_kinds, gfc_omp_get_token_offset_data,
	gfc_omp_get_token_offset, gfc_omp_get_token_flags,
	gfc_omp_get_token_detach, gfc_omp_get_map_token_type,
	gfc_omp_get_cb_type, gfc_omp_gen_deep_map_fn,
	gfc_omp_deep_mapping_map, gfc_omp_deep_mapping_item,
	gfc_omp_deep_mapping_comps, gfc_omp_gen_simple_loop,
	gfc_omp_get_array_size, gfc_omp_elmental_loop,
	gfc_omp_deep_map_kind_p, gfc_omp_deep_mapping_int_p,
	gfc_omp_deep_mapping_p, gfc_omp_deep_mapping_do),
	gfc_omp_deep_mapping_cnt, gfc_omp_deep_mapping): New.
	(gfc_trans_omp_array_section): Save clause decl to survive gimplifying.
	(gfc_trans_omp_clauses): Likewise; fixes.
	* trans-types.cc (gfc_build_array_type, gfc_get_derived_type,
	gfc_get_array_descr_info): Update array kind to distinguish
	different assumed-rank arrays.
	* trans.h (gfc_class_vtab_callback_get, gfc_omp_deep_mapping_p,
	gfc_omp_deep_mapping_cnt, gfc_omp_deep_mapping): New prototypes.
	(enum gfc_array_kind): Additional GFC_ARRAY_ASSUMED_RANK_* entries.

2022-02-11  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* gfortran.h (is_omp_declarative_stmt): New.
	* openmp.cc (match_omp_metadirective): Reject declarative OpenMP
	directives with 'sorry'.
	* parse.cc (parse_omp_metadirective_body): Check that state stack head
	is non-null before dereferencing.
	(is_omp_declarative_stmt): New.

2022-02-11  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* decl.cc (gfc_match_end): Search for first previous state that is not
	COMP_OMP_METADIRECTIVE.
	* gfortran.h (gfc_skip_omp_metadirective_clause): Add prototype.
	* openmp.cc (match_omp_metadirective): Skip clause if
	result of gfc_skip_omp_metadirective_clause is true.
	* trans-openmp.ccc (gfc_trans_omp_set_selector): Add argument and
	disable expression conversion if false.
	(gfc_skip_omp_metadirective_clause): New.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* openmp.cc (omp_target_device_selectors): New.
	(gfc_match_omp_context_selector): Accept 'target_device' selector set.
	Treat 'device_num' selector as expression.
	(gfc_match_omp_context_selector_specification): Handle 'target_device'
	selector set.
	* types.def (BT_FN_BOOL_INT_CONST_PTR_CONST_PTR_CONST_PTR): New type.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* decl.cc (gfc_match_end): Handle COMP_OMP_METADIRECTIVE and
	COMP_OMP_BEGIN_METADIRECTIVE.
	* dump-parse-tree.cc (show_omp_node): Handle EXEC_OMP_METADIRECTIVE.
	(show_code_node): Handle EXEC_OMP_METADIRECTIVE.
	* gfortran.h (enum gfc_statement): Add ST_OMP_METADIRECTIVE,
	ST_OMP_BEGIN_METADIRECTIVE and ST_OMP_END_METADIRECTIVE.
	(struct gfc_omp_metadirective_clause): New structure.
	(gfc_get_omp_metadirective_clause): New macro.
	(struct gfc_st_label): Add omp_region field.
	(enum gfc_exec_op): Add EXEC_OMP_METADIRECTIVE.
	(struct gfc_code): Add omp_metadirective_clauses field.
	(gfc_free_omp_metadirective_clauses): New prototype.
	(match_omp_directive): New prototype.
	* io.cc (format_asterisk): Initialize omp_region field.
	* match.h (gfc_match_omp_begin_metadirective): New prototype.
	(gfc_match_omp_metadirective): New prototype.
	* openmp.cc (gfc_match_omp_eos): Match ')' in context selectors.
	(gfc_free_omp_metadirective_clauses): New.
	(gfc_match_omp_clauses): Remove context_selector argument.  Rely on
	gfc_match_omp_eos to match end of clauses.
	(match_omp): Remove extra argument to gfc_match_omp_clauses.
	(gfc_match_omp_context_selector): Remove extra argument to
	gfc_match_omp_clauses.  Set gfc_matching_omp_context_selector
	before call to gfc_match_omp_clauses and reset after.
	(gfc_match_omp_context_selector_specification): Modify to take a
	gfc_omp_set_selector** argument.
	(gfc_match_omp_declare_variant): Pass set_selectors to
	gfc_match_omp_context_selector_specification.
	(match_omp_metadirective): New.
	(gfc_match_omp_begin_metadirective): New.
	(gfc_match_omp_metadirective): New.
	(resolve_omp_metadirective): New.
	(gfc_resolve_omp_directive): Handle EXEC_OMP_METADIRECTIVE.
	* parse.cc (gfc_matching_omp_context_selector): New variable.
	(gfc_in_metadirective_body): New variable.
	(gfc_omp_region_count): New variable.
	(decode_omp_directive): Match 'begin metadirective',
	'end metadirective' and 'metadirective'.
	(match_omp_directive): New.
	(case_omp_structured_block): New.
	(case_omp_do): New.
	(gfc_ascii_statement): Handle metadirective statements.
	(gfc_omp_end_stmt): New.
	(parse_omp_do): Delegate to gfc_omp_end_stmt.
	(parse_omp_structured_block): Delegate to gfc_omp_end_stmt. Handle
	ST_OMP_END_METADIRECTIVE.
	(parse_omp_metadirective_body): New.
	(parse_executable): Delegate to case_omp_structured_block and
	case_omp_do.  Return after one statement if compiling regular
	metadirective.  Handle metadirective statements.
	(gfc_parse_file): Reset gfc_omp_region_count,
	gfc_in_metadirective_body and gfc_matching_omp_context_selector.
	* parse.h (enum gfc_compile_state): Add COMP_OMP_METADIRECTIVE and
	COMP_OMP_BEGIN_METADIRECTIVE.
	(gfc_omp_end_stmt): New prototype.
	(gfc_matching_omp_context_selector): New declaration.
	(gfc_in_metadirective_body): New declaration.
	(gfc_omp_region_count): New declaration.
	* resolve.cc (gfc_resolve_code): Handle EXEC_OMP_METADIRECTIVE.
	* st.cc (gfc_free_statement): Handle EXEC_OMP_METADIRECTIVE.
	* symbol.cc (compare_st_labels): Take omp_region into account.
	(gfc_get_st_labels): Incorporate omp_region into label.
	* trans-decl.ccc (gfc_get_label_decl): Add omp_region into translated
	label name.
	* trans-openmp.ccc (gfc_trans_omp_directive): Handle
	EXEC_OMP_METADIRECTIVE.
	(gfc_trans_omp_set_selector): Hoist code from...
	(gfc_trans_omp_declare_variant): ...here.
	(gfc_trans_omp_metadirective): New.
	* trans-stmt.h (gfc_trans_omp_metadirective): New prototype.
	* trans.cc (trans_code): Handle EXEC_OMP_METADIRECTIVE.

2021-11-16  Sandra Loosemore <sandra@codesourcery.com>
	    Tobias Burnus  <tobias@codesourcery.com>

	* lang.opt (-param=delinearize=): New.
	* trans-array.cc (get_class_array_vptr): New, split from...
	(build_array_ref): ...here.
	(get_array_lbound, get_array_ubound): New, split from...
	(gfc_conv_array_ref): ...here.  Additional code refactoring
	plus support for delinearization of the array access.

2021-06-02  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.cc (gfc_trans_omp_clauses): Don't create GOMP_MAP_TO_PSET
	mappings for class metadata, nor GOMP_MAP_POINTER mappings for
	POINTER_TYPE_P decls.

2021-02-02  Chung-Lin Tang  <cltang@codesourcery.com>

	* openmp.cc (gfc_check_omp_requires): Fix REVERSE_OFFLOAD typo.
	(gfc_match_omp_requires): Adjust to only mention "not implemented yet"
	for OMP_REQUIRES_DYNAMIC_ALLOCATORS.
	* parse.cc ("tree.h"): Add include.
	("omp-general.h"): Likewise.
	(gfc_parse_file): Add code to merge omp_requires to omp_requires_mask.

2020-08-22  Sandra Loosemore  <sandra@codesourcery.com>

	Permit calls to Fortran intrinsics when annotating loops in
	kernels regions.

	* openmp.cc (check_expr_for_invalid_calls): Check for intrinsic
	functions.

2020-08-19  Sandra Loosemore  <sandra@codesourcery.com>

	Annotate inner loops in "acc kernels loop" directives (Fortran).

	* openmp.cc (annotate_do_loops_in_kernels): Handle
	EXEC_OACC_KERNELS_LOOP separately to permit annotation of inner
	loops in a combined "acc kernels loop" directive.

2020-08-19  Sandra Loosemore  <sandra@codesourcery.com>

	Add a "combined" flag for "acc kernels loop" etc directives.

	* trans-openmp.cc (gfc_trans_omp_do): Add combined parameter,
	use it to set OACC_LOOP_COMBINED.  Update all call sites.

2020-03-27  Sandra Loosemore  <sandra@codesourcery.com>
	    Gergö Barany <gergo@codesourcery.com>

	* gfortran.h (gfc_oacc_annotate_loops_in_kernels_regions): Declare.
	* lang.opt (Wopenacc-kernels-annotate-loops): New.
	(fopenacc-kernels-annotate-loops): New.
	* openmp.cc: Include options.h.
	(enum annotation_state, enum annotation_result): New.
	(check_code_for_invalid_calls): New.
	(check_expr_for_invalid_calls): New.
	(check_for_invalid_calls): New.
	(annotate_do_loop): New.
	(annotate_do_loops_in_kernels): New.
	(compute_goto_targets): New.
	(gfc_oacc_annotate_loops_in_kernels_regions): New.
	* parse.cc (gfc_parse_file): Handle -fopenacc-kernels-annotate-loops.

2020-02-19  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.ccc (gfc_omp_check_optional_argument): Handle non-decl
	case.

2018-10-04  Cesar Philippidis  <cesar@codesourcery.com>
	    Julian Brown  <julian@codesourcery.com>

	* gfortran.h (enum gfc_omp_map_op): Add OMP_MAP_DECLARE_ALLOCATE,
	OMP_MAP_DECLARE_DEALLOCATE.
	(gfc_omp_clauses): Add update_allocatable.
	* trans-array.c (gfc_array_allocate): Call
	gfc_trans_oacc_declare_allocate for decls that have oacc_declare_create
	attribute set.
	* trans-decl.c (find_module_oacc_declare_clauses): Relax oacc_declare_create to
	OMP_MAP_ALLOC, and oacc_declare_copyin to OMP_MAP_TO, in order to
	match OpenACC 2.5 semantics.
	* trans-openmp.c (gfc_trans_omp_clauses): Use GOMP_MAP_ALWAYS_POINTER
	(for update directive) or GOMP_MAP_FIRSTPRIVATE_POINTER (otherwise) for
	allocatable scalar decls.  Handle OMP_MAP_DECLARE_{ALLOCATE,DEALLOCATE}
	clauses.
	(gfc_trans_oacc_executable_directive): Use GOMP_MAP_ALWAYS_POINTER
	for allocatable scalar data clauses inside acc update directives.
	(gfc_trans_oacc_declare_allocate): New function.
	* trans-stmt.c (gfc_trans_allocate): Call
	gfc_trans_oacc_declare_allocate for decls with oacc_declare_create
	attribute set.
	(gfc_trans_deallocate): Likewise.
	* trans.h (gfc_trans_oacc_declare_allocate): Declare.

2019-07-10  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.cc (gfc_omp_finish_clause): Change clauses mapping
	assumed-size arrays to use the GOMP_MAP_FORCE_PRESENT map type.

2019-05-19  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.cc (gfc_omp_finish_clause): Guard addition of clauses for
	pointers with DECL_P.

2018-12-13  Cesar Philippidis  <cesar@codesourcery.com>
	    Nathan Sidwell  <nathan@acm.org>
	    Julian Brown  <julian@codesourcery.com>

	* openmp.cc (oacc_is_parallel): New.
	(resolve_oacc_loop_blocks): Emit an error on orphan OpenACC
	gang reductions.
	* trans-openmp.ccc (gfc_omp_clause_copy_ctor): Permit reductions.

2018-06-29  Cesar Philippidis  <cesar@codesourcery.com>
	    James Norris  <jnorris@codesourcery.com>

	* openmp.cc (resolve_positive_int_expr): Promote the warning to an
	error.

2020-04-19  Chung-Lin Tang  <cltang@codesourcery.com>

	PR other/76739

	* f95-lang.cc (DEF_FUNCTION_TYPE_VAR_5): New symbol.
	* types.def (BT_FN_VOID_INT_SIZE_PTR_PTR_PTR_VAR): New type.
