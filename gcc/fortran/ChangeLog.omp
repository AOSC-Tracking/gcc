2022-05-12  Tobias Burnus  <tobias@codesourcery.com>

	* trans-array.cc (gfc_scalar_elemental_arg_saved_as_reference):
	Return true for attr.proc_pointer expressions.

2022-04-27  Tobias Burnus <tobias@codesourcery.com>

	* resolve.cc (gfc_resolve_finalizers): Remove
	gfc_resolve_finalizers calls, use gfc_is_finalizable.
	(resolve_fl_derived): Resolve derived-type components
	first.

2022-04-25  Tobias Burnus  <tobias@codesourcery.com>

	* resolve.cc (gfc_resolve_finalizers): Also resolve allocatable comps.

2022-03-10  Andrew Stubbs  <ams@codesourcery.com>

	* openmp.cc (gfc_match_omp_requires): Allow "requires
	unified_share_memory" and "unified_address".

2022-01-08  Hafiz Abid Qadeer  <abidh@codesourcery.com>

	* gfortran.h (struct access_ref): Declare new members
	omp_allocated and omp_allocated_end.
	* openmp.cc (gfc_match_omp_allocate): Set new_st.resolved_sym to
	NULL.
	(prepare_omp_allocated_var_list_for_cleanup): New function.
	(gfc_resolve_omp_allocate): Call it.
	* trans-decl.cc (gfc_trans_deferred_vars): Process omp_allocated.
	* trans-openmp.cc (gfc_trans_omp_allocate): Set kind for the stmt
	generated for allocate directive.

2022-03-09  Hafiz Abid Qadeer  <abidh@codesourcery.com>

	* trans-openmp.cc (gfc_trans_omp_clauses): Handle OMP_LIST_ALLOCATOR.
	(gfc_trans_omp_allocate): New function.
	(gfc_trans_omp_directive): Handle EXEC_OMP_ALLOCATE.

2022-03-09  Hafiz Abid Qadeer  <abidh@codesourcery.com>

	* dump-parse-tree.cc (show_omp_node): Handle EXEC_OMP_ALLOCATE.
	(show_code_node): Likewise.
	* gfortran.h (enum gfc_statement): Add ST_OMP_ALLOCATE.
	(OMP_LIST_ALLOCATOR): New enum value.
	(enum gfc_exec_op): Add EXEC_OMP_ALLOCATE.
	* match.h (gfc_match_omp_allocate): New function.
	* openmp.cc (enum omp_mask1): Add OMP_CLAUSE_ALLOCATOR.
	(OMP_ALLOCATE_CLAUSES): New define.
	(gfc_match_omp_allocate): New function.
	(resolve_omp_clauses): Add ALLOCATOR in clause_names.
	(omp_code_to_statement): Handle EXEC_OMP_ALLOCATE.
	(EMPTY_VAR_LIST): New define.
	(check_allocate_directive_restrictions): New function.
	(gfc_resolve_omp_allocate): Likewise.
	(gfc_resolve_omp_directive): Handle EXEC_OMP_ALLOCATE.
	* parse.cc (decode_omp_directive): Handle ST_OMP_ALLOCATE.
	(next_statement): Likewise.
	(gfc_ascii_statement): Likewise.
	* resolve.cc (gfc_resolve_code): Handle EXEC_OMP_ALLOCATE.
	* st.cc (gfc_free_statement): Likewise.
	* trans.cc (trans_code): Likewise.

2022-03-01  Tobias Burnus  <tobias@codesourcery.com>

	* class.cc (finalization_scalarizer): Mark syms as artificial.
	(generate_callback_wrapper): New.
	(gfc_find_derived_vtab): Call it, add _callback comp.
	* f95-lang.cc (LANG_HOOKS_OMP_DEEP_MAPPING,
	LANG_HOOKS_OMP_DEEP_MAPPING_P,
	LANG_HOOKS_OMP_DEEP_MAPPING_CNT): Redeinfe
	* gfortran.h (gfc_import_iso_c_binding_module,
	GFC_CLASS_CALLBACK_DEFAULT_FLAG, GFC_CLASS_CALLBACK_VTABLE_FLAG,
	GFC_CLASS_CB_ALLOCATABLE, GFC_CLASS_CB_POINTER,
	GFC_CLASS_CB_PROC_POINTER, GFC_CLASS_CB_VTABLE,
	GFC_CLASS_CB_VPTR): New.
	* match.cc (select_type_set_tmp): Propagate allocatable property.
	* module.cc (MOD_VERSION): Bump due to vtab change.
	(import_iso_c_binding_module): New import_all arg.
	(gfc_import_iso_c_binding_module): New.
	(gfc_use_module): Update call.
	* openmp.cc (resolve_omp_clauses): Accept DT with alloc comps.
	* resolve.cc (gfc_resolve_formal_arglist, gfc_resolve_intrinsic,
	resolve_fl_procedure, resolve_types): Permit some violations
	for internal code.
	* trans-array.cc (gfc_conv_descriptor_stride_get,
	gfc_tree_array_size, gfc_full_array_size): Update
	for GFC_TYPE_ARRAY_AKIND change.
	(gfc_conv_expr_descriptor): Likewise; permit calling with tree code.
	* trans-expr.cc (VTABLE_CALLBACK_FIELD): Add.
	(VTAB_GET_FIELD_GEN): Use it.
	(VTABLE_DEALLOCATE_FIELD): Undef at the end.
	(gfc_conv_expr_reference): Fixes; avoid unneccessary temp var.
	* trans-intrinsic.cc (gfc_conv_intrinsic_sizeof,
	gfc_conv_associated): Fix class and comp-ref handling.
	(conv_isocbinding_function): Remove buggy code.
	* trans-openmp.ccc (gfc_has_alloc_comps): Add ptr_ok arg.
	(gfc_omp_private_outer_ref, gfc_walk_alloc_comps,
	gfc_omp_clause_default_ctor, gfc_omp_clause_copy_ctor,
	gfc_omp_clause_assign_op, gfc_omp_clause_dtor,
	(gfc_omp_finish_clause): Update call.
	(GFC_MAP_TOKEN_DATA, GFC_MAP_TOKEN_SIZES, GFC_MAP_TOKEN_KINDS,
	GFC_MAP_TOKEN_DATA_OFFSET, GFC_MAP_TOKEN_OFFSET,
	GFC_MAP_TOKEN_FLAGS, GFC_MAP_TOKEN_DETACH): Define.
	(gfc_omp_get_token_data, gfc_omp_get_token_sizes,
	gfc_omp_get_token_kinds, gfc_omp_get_token_offset_data,
	gfc_omp_get_token_offset, gfc_omp_get_token_flags,
	gfc_omp_get_token_detach, gfc_omp_get_map_token_type,
	gfc_omp_get_cb_type, gfc_omp_gen_deep_map_fn,
	gfc_omp_deep_mapping_map, gfc_omp_deep_mapping_item,
	gfc_omp_deep_mapping_comps, gfc_omp_gen_simple_loop,
	gfc_omp_get_array_size, gfc_omp_elmental_loop,
	gfc_omp_deep_map_kind_p, gfc_omp_deep_mapping_int_p,
	gfc_omp_deep_mapping_p, gfc_omp_deep_mapping_do),
	gfc_omp_deep_mapping_cnt, gfc_omp_deep_mapping): New.
	(gfc_trans_omp_array_section): Save clause decl to survive gimplifying.
	(gfc_trans_omp_clauses): Likewise; fixes.
	* trans-types.cc (gfc_build_array_type, gfc_get_derived_type,
	gfc_get_array_descr_info): Update array kind to distinguish
	different assumed-rank arrays.
	* trans.h (gfc_class_vtab_callback_get, gfc_omp_deep_mapping_p,
	gfc_omp_deep_mapping_cnt, gfc_omp_deep_mapping): New prototypes.
	(enum gfc_array_kind): Additional GFC_ARRAY_ASSUMED_RANK_* entries.

2022-02-11  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* decl.cc (gfc_match_end): Search for first previous state that is not
	COMP_OMP_METADIRECTIVE.
	* gfortran.h (gfc_skip_omp_metadirective_clause): Add prototype.
	* openmp.cc (match_omp_metadirective): Skip clause if
	result of gfc_skip_omp_metadirective_clause is true.
	* trans-openmp.ccc (gfc_trans_omp_set_selector): Add argument and
	disable expression conversion if false.
	(gfc_skip_omp_metadirective_clause): New.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* openmp.cc (omp_target_device_selectors): New.
	(gfc_match_omp_context_selector): Accept 'target_device' selector set.
	Treat 'device_num' selector as expression.
	(gfc_match_omp_context_selector_specification): Handle 'target_device'
	selector set.
	* types.def (BT_FN_BOOL_INT_CONST_PTR_CONST_PTR_CONST_PTR): New type.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* decl.cc (gfc_match_end): Handle COMP_OMP_METADIRECTIVE and
	COMP_OMP_BEGIN_METADIRECTIVE.
	* dump-parse-tree.cc (show_omp_node): Handle EXEC_OMP_METADIRECTIVE.
	(show_code_node): Handle EXEC_OMP_METADIRECTIVE.
	* gfortran.h (enum gfc_statement): Add ST_OMP_METADIRECTIVE,
	ST_OMP_BEGIN_METADIRECTIVE and ST_OMP_END_METADIRECTIVE.
	(struct gfc_omp_metadirective_clause): New structure.
	(gfc_get_omp_metadirective_clause): New macro.
	(struct gfc_st_label): Add omp_region field.
	(enum gfc_exec_op): Add EXEC_OMP_METADIRECTIVE.
	(struct gfc_code): Add omp_metadirective_clauses field.
	(gfc_free_omp_metadirective_clauses): New prototype.
	(match_omp_directive): New prototype.
	(is_omp_declarative_stmt): New prototype.
	* io.cc (format_asterisk): Initialize omp_region field.
	* match.h (gfc_match_omp_begin_metadirective): New prototype.
	(gfc_match_omp_metadirective): New prototype.
	* openmp.cc (gfc_match_omp_eos): Match ')' in context selectors.
	(gfc_free_omp_metadirective_clauses): New.
	(gfc_match_omp_clauses): Remove context_selector argument.  Rely on
	gfc_match_omp_eos to match end of clauses.
	(match_omp): Remove extra argument to gfc_match_omp_clauses.
	(gfc_match_omp_context_selector): Remove extra argument to
	gfc_match_omp_clauses.  Set gfc_matching_omp_context_selector
	before call to gfc_match_omp_clauses and reset after.
	(gfc_match_omp_context_selector_specification): Modify to take a
	gfc_omp_set_selector** argument.
	(gfc_match_omp_declare_variant): Pass set_selectors to
	gfc_match_omp_context_selector_specification.
	(match_omp_metadirective): New.
	(gfc_match_omp_begin_metadirective): New.
	(gfc_match_omp_metadirective): New.
	(resolve_omp_metadirective): New.
	(gfc_resolve_omp_directive): Handle EXEC_OMP_METADIRECTIVE.
	* parse.cc (gfc_matching_omp_context_selector): New variable.
	(gfc_in_metadirective_body): New variable.
	(gfc_omp_region_count): New variable.
	(decode_omp_directive): Match 'begin metadirective',
	'end metadirective' and 'metadirective'.
	(match_omp_directive): New.
	(case_omp_structured_block): New.
	(case_omp_do): New.
	(gfc_ascii_statement): Handle metadirective statements.
	(gfc_omp_end_stmt): New.
	(parse_omp_do): Delegate to gfc_omp_end_stmt.
	(parse_omp_structured_block): Delegate to gfc_omp_end_stmt. Handle
	ST_OMP_END_METADIRECTIVE.
	(parse_omp_metadirective_body): New.
	(parse_executable): Delegate to case_omp_structured_block and
	case_omp_do.  Return after one statement if compiling regular
	metadirective.  Handle metadirective statements.
	(gfc_parse_file): Reset gfc_omp_region_count,
	gfc_in_metadirective_body and gfc_matching_omp_context_selector.
	(is_omp_declarative_stmt): New.
	* parse.h (enum gfc_compile_state): Add COMP_OMP_METADIRECTIVE and
	COMP_OMP_BEGIN_METADIRECTIVE.
	(gfc_omp_end_stmt): New prototype.
	(gfc_matching_omp_context_selector): New declaration.
	(gfc_in_metadirective_body): New declaration.
	(gfc_omp_region_count): New declaration.
	* resolve.cc (gfc_resolve_code): Handle EXEC_OMP_METADIRECTIVE.
	* st.cc (gfc_free_statement): Handle EXEC_OMP_METADIRECTIVE.
	* symbol.cc (compare_st_labels): Take omp_region into account.
	(gfc_get_st_labels): Incorporate omp_region into label.
	* trans-decl.ccc (gfc_get_label_decl): Add omp_region into translated
	label name.
	* trans-openmp.ccc (gfc_trans_omp_directive): Handle
	EXEC_OMP_METADIRECTIVE.
	(gfc_trans_omp_set_selector): Hoist code from...
	(gfc_trans_omp_declare_variant): ...here.
	(gfc_trans_omp_metadirective): New.
	* trans-stmt.h (gfc_trans_omp_metadirective): New prototype.
	* trans.cc (trans_code): Handle EXEC_OMP_METADIRECTIVE.

2021-11-16  Sandra Loosemore <sandra@codesourcery.com>
	    Tobias Burnus  <tobias@codesourcery.com>

	* lang.opt (-param=delinearize=): New.
	* trans-array.cc (get_class_array_vptr): New, split from...
	(build_array_ref): ...here.
	(get_array_lbound, get_array_ubound): New, split from...
	(gfc_conv_array_ref): ...here.  Additional code refactoring
	plus support for delinearization of the array access.

2020-08-22  Sandra Loosemore  <sandra@codesourcery.com>

	Permit calls to Fortran intrinsics when annotating loops in
	kernels regions.

	* openmp.cc (check_expr_for_invalid_calls): Check for intrinsic
	functions.

2020-08-19  Sandra Loosemore  <sandra@codesourcery.com>

	Annotate inner loops in "acc kernels loop" directives (Fortran).

	* openmp.cc (annotate_do_loops_in_kernels): Handle
	EXEC_OACC_KERNELS_LOOP separately to permit annotation of inner
	loops in a combined "acc kernels loop" directive.

2020-08-19  Sandra Loosemore  <sandra@codesourcery.com>

	Add a "combined" flag for "acc kernels loop" etc directives.

	* trans-openmp.cc (gfc_trans_omp_do): Add combined parameter,
	use it to set OACC_LOOP_COMBINED.  Update all call sites.

2020-03-27  Sandra Loosemore  <sandra@codesourcery.com>
	    Gergö Barany <gergo@codesourcery.com>

	* gfortran.h (gfc_oacc_annotate_loops_in_kernels_regions): Declare.
	* lang.opt (Wopenacc-kernels-annotate-loops): New.
	(fopenacc-kernels-annotate-loops): New.
	* openmp.cc: Include options.h.
	(enum annotation_state, enum annotation_result): New.
	(check_code_for_invalid_calls): New.
	(check_expr_for_invalid_calls): New.
	(check_for_invalid_calls): New.
	(annotate_do_loop): New.
	(annotate_do_loops_in_kernels): New.
	(compute_goto_targets): New.
	(gfc_oacc_annotate_loops_in_kernels_regions): New.
	* parse.cc (gfc_parse_file): Handle -fopenacc-kernels-annotate-loops.

2020-02-19  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.ccc (gfc_omp_check_optional_argument): Handle non-decl
	case.

2018-10-04  Cesar Philippidis  <cesar@codesourcery.com>
	    Julian Brown  <julian@codesourcery.com>

	* gfortran.h (enum gfc_omp_map_op): Add OMP_MAP_DECLARE_ALLOCATE,
	OMP_MAP_DECLARE_DEALLOCATE.
	(gfc_omp_clauses): Add update_allocatable.
	* trans-array.c (gfc_array_allocate): Call
	gfc_trans_oacc_declare_allocate for decls that have oacc_declare_create
	attribute set.
	* trans-decl.c (find_module_oacc_declare_clauses): Relax oacc_declare_create to
	OMP_MAP_ALLOC, and oacc_declare_copyin to OMP_MAP_TO, in order to
	match OpenACC 2.5 semantics.
	* trans-openmp.c (gfc_trans_omp_clauses): Use GOMP_MAP_ALWAYS_POINTER
	(for update directive) or GOMP_MAP_FIRSTPRIVATE_POINTER (otherwise) for
	allocatable scalar decls.  Handle OMP_MAP_DECLARE_{ALLOCATE,DEALLOCATE}
	clauses.
	(gfc_trans_oacc_executable_directive): Use GOMP_MAP_ALWAYS_POINTER
	for allocatable scalar data clauses inside acc update directives.
	(gfc_trans_oacc_declare_allocate): New function.
	* trans-stmt.c (gfc_trans_allocate): Call
	gfc_trans_oacc_declare_allocate for decls with oacc_declare_create
	attribute set.
	(gfc_trans_deallocate): Likewise.
	* trans.h (gfc_trans_oacc_declare_allocate): Declare.

2019-07-10  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.cc (gfc_omp_finish_clause): Change clauses mapping
	assumed-size arrays to use the GOMP_MAP_FORCE_PRESENT map type.

2019-05-19  Julian Brown  <julian@codesourcery.com>

	* trans-openmp.cc (gfc_omp_finish_clause): Guard addition of clauses for
	pointers with DECL_P.

2018-12-13  Cesar Philippidis  <cesar@codesourcery.com>
	    Nathan Sidwell  <nathan@acm.org>
	    Julian Brown  <julian@codesourcery.com>

	* openmp.cc (oacc_is_parallel): New.
	(resolve_oacc_loop_blocks): Emit an error on orphan OpenACC
	gang reductions.
	* trans-openmp.ccc (gfc_omp_clause_copy_ctor): Permit reductions.

2018-06-29  Cesar Philippidis  <cesar@codesourcery.com>
	    James Norris  <jnorris@codesourcery.com>

	* openmp.cc (resolve_positive_int_expr): Promote the warning to an
	error.

2020-04-19  Chung-Lin Tang  <cltang@codesourcery.com>

	PR other/76739

	* f95-lang.cc (DEF_FUNCTION_TYPE_VAR_5): New symbol.
	* types.def (BT_FN_VOID_INT_SIZE_PTR_PTR_PTR_VAR): New type.
