2023-03-27  Frederik Harwath  <frederik@codesourcery.com>

	* c-parser.cc (c_parser_omp_nested_loop_transform_clauses):
	Add argument for the level of loop-nest at which the clauses
	appear, ...
	(c_parser_omp_tile): ... adjust use here,
	(c_parser_omp_unroll): ... and here,
	(c_parser_omp_for_loop): ... and here.  Stop treating loop
	transformations like intervening code, parse them, and adjust
	the loop-nest depth if necessary for tiling.

2023-03-27  Frederik Harwath  <frederik@codesourcery.com>

	* c-parser.cc (c_parser_omp_clause_unroll_full): Set new
	OMP_CLAUSE_TRANSFORM_LEVEL operand to default value.
	(c_parser_omp_clause_unroll_partial): Likewise.
	(c_parser_omp_tile_sizes): Likewise.
	(c_parser_omp_loop_transform_clause): Likewise.
	(c_parser_omp_nested_loop_transform_clauses): Likewise.
	(c_parser_omp_unroll): Likewise.

2023-03-27  Frederik Harwath  <frederik@codesourcery.com>

	* c-parser.cc (c_parser_nested_omp_unroll_clauses): Rename and
	generalize ...
	(c_parser_omp_nested_loop_transform_clauses): ... to this.
	(c_parser_omp_for_loop): Handle "omp tile" parsing in loop nests.
	(c_parser_omp_tile_sizes): Parse single "sizes" clause.
	(c_parser_omp_loop_transform_clause): New function.
	(c_parser_omp_tile): New function for parsing "omp tile"
	(c_parser_omp_unroll): Adjust to renaming.
	(c_parser_omp_construct): Handle PRAGMA_OMP_TILE.

2023-03-27  Frederik Harwath  <frederik@codesourcery.com>

	* c-parser.cc (c_parser_omp_clause_collapse): Adjust to renamings.
	(c_parser_oacc_clause_tile): Likewise.
	(c_parser_omp_for_loop): Likewise.
	* c-typeck.cc (c_finish_omp_clauses): Likewise.

2023-03-27  Frederik Harwath  <frederik@codesourcery.com>

	* c-parser.cc (c_parser_omp_clause_name): Handle "full" and
	"partial" clauses.
	(check_no_duplicate_clause): Change return type to bool and
	return check result.
	(c_parser_omp_clause_unroll_full): New function for parsing
	the "unroll clause".
	(c_parser_omp_clause_unroll_partial): New function for
	parsing the "partial" clause.
	(c_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_FULL
	and PRAGMA_OMP_CLAUSE_PARTIAL.
	(c_parser_nested_omp_unroll_clauses): New function for parsing
	"omp unroll" directives following another directive.
	(OMP_UNROLL_CLAUSE_MASK): New definition.
	(c_parser_omp_unroll): New function for parsing "omp unroll"
	loops that are not associated with another directive.
	(c_parser_omp_construct): Handle PRAGMA_OMP_UNROLL.
	* c-typeck.cc (c_finish_omp_clauses): Handle
	OMP_CLAUSE_UNROLL_FULL, OMP_CLAUSE_UNROLL_PARTIAL,
	and OMP_CLAUSE_UNROLL_NONE.

2023-02-09  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-parser.cc (c_parser_omp_variable_list): Set default motion
	modifier.
	(c_parser_omp_var_list_parens): Add new parameter with default.  Parse
	'present' motion modifier and apply.
	(c_parser_omp_clause_defaultmap): Parse 'present' in defaultmap.
	(c_parser_omp_clause_map): Parse 'present' modifier in map clauses.
	(c_parser_omp_clause_to): Allow use of 'present' in variable list.
	(c_parser_omp_clause_from): Likewise.
	(c_parser_omp_target_data): Allow map clauses with 'present'
	modifiers.
	(c_parser_omp_target_enter_data): Likewise.
	(c_parser_omp_target_exit_data): Likewise.
	(c_parser_omp_target): Likewise.

2022-10-28  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-10-28  Jakub Jelinek  <jakub@redhat.com>

	* c-parser.cc (c_parser_omp_all_clauses): Allow optional
	comma before the first clause.
	(c_parser_omp_allocate, c_parser_omp_atomic, c_parser_omp_depobj,
	c_parser_omp_flush, c_parser_omp_scan_loop_body,
	c_parser_omp_ordered, c_finish_omp_declare_variant,
	c_parser_omp_declare_target, c_parser_omp_declare_reduction,
	c_parser_omp_requires, c_parser_omp_error,
	c_parser_omp_assumption_clauses): Likewise.

2022-10-27  Marcel Vollweiler  <marcel@codesourcery.com>

	* c-typeck.cc (c_finish_omp_clauses): Remove "gang reduction on an
	orphan loop" checking.

2022-10-04  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-10-04  Jakub Jelinek  <jakub@redhat.com>

	* c-lang.h (struct c_omp_declare_target_attr): New type.
	(current_omp_declare_target_attribute): Change type from
	int to vec<c_omp_declare_target_attr, va_gc> *.
	* c-parser.cc (c_parser_translation_unit): Adjust for that change.
	If last pushed directive was begin declare target, use different
	wording and simplify format strings for easier translations.
	(c_parser_omp_clause_device_type): Uncomment
	check_no_duplicate_clause call.
	(c_parser_omp_declare_target): Adjust for the
	current_omp_declare_target_attribute type change, push { -1 }.
	Use error_at rather than warning_at for declare target with
	only device_type clauses.
	(OMP_BEGIN_DECLARE_TARGET_CLAUSE_MASK): Define.
	(c_parser_omp_begin): Add begin declare target support.
	(c_parser_omp_end): Adjust for the
	current_omp_declare_target_attribute type change, adjust
	diagnostics wording and simplify format strings for easier
	translations.
	* c-decl.cc (current_omp_declare_target_attribute): Change type from
	int to vec<c_omp_declare_target_attr, va_gc> *.
	(c_decl_attributes): Adjust for the
	current_omp_declare_target_attribute type change.  If device_type
	was present on begin declare target, add "omp declare target host"
	and/or "omp declare target nohost" attributes.

2022-09-27  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-09-27  Jakub Jelinek  <jakub@redhat.com>

	* c-lang.h (current_omp_begin_assumes): Declare.
	* c-parser.cc: Include bitmap.h.
	(c_parser_omp_end_declare_target): Rename to ...
	(c_parser_omp_end): ... this.  Handle also end assumes.
	(c_parser_omp_begin, c_parser_omp_assumption_clauses,
	c_parser_omp_assumes, c_parser_omp_assume): New functions.
	(c_parser_translation_unit): Also diagnose #pragma omp begin assumes
	without corresponding #pragma omp end assumes.
	(c_parser_pragma): Use %s in may only be used at file scope
	diagnostics to decrease number of translatable messages.  Handle
	PRAGMA_OMP_BEGIN and PRAGMA_OMP_ASSUMES.  Handle PRAGMA_OMP_END
	rather than PRAGMA_OMP_END_DECLARE_TARGET and call c_parser_omp_end
	for it rather than c_parser_omp_end_declare_target.
	(c_parser_omp_construct): Handle PRAGMA_OMP_ASSUME.
	* c-decl.cc (current_omp_begin_assumes): Define.

2022-09-24  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-09-24  Jakub Jelinek  <jakub@redhat.com>

	PR c/106981
	* c-typeck.cc (c_tree_equal): Only strip NON_LVALUE_EXPRs at the
	start.  For CONSTANT_CLASS_P or CASE_CONVERT: return false if t1 and
	t2 have different types.

2022-09-06  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-09-06  Jakub Jelinek  <jakub@redhat.com>

	* c-parser.cc (c_parser_omp_clause_doacross_sink): Don't verify val
	in omp_cur_iteration - 1 has integer_type_node type.

2022-09-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-09-03  Jakub Jelinek  <jakub@redhat.com>

	* c-parser.cc (c_parser_omp_clause_name): Handle doacross.
	(c_parser_omp_clause_depend_sink): Renamed to ...
	(c_parser_omp_clause_doacross_sink): ... this.  Add depend_p argument.
	Handle parsing of doacross(sink:omp_cur_iteration-1).  Use
	OMP_CLAUSE_DOACROSS_SINK_NEGATIVE instead of
	OMP_CLAUSE_DEPEND_SINK_NEGATIVE, build OMP_CLAUSE_DOACROSS instead
	of OMP_CLAUSE_DEPEND and set OMP_CLAUSE_DOACROSS_DEPEND flag on it.
	(c_parser_omp_clause_depend): Use OMP_CLAUSE_DOACROSS_SINK and
	OMP_CLAUSE_DOACROSS_SOURCE instead of OMP_CLAUSE_DEPEND_SINK and
	OMP_CLAUSE_DEPEND_SOURCE, build OMP_CLAUSE_DOACROSS for depend(source)
	and set OMP_CLAUSE_DOACROSS_DEPEND on it.
	(c_parser_omp_clause_doacross): New function.
	(c_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_DOACROSS.
	(c_parser_omp_depobj): Use OMP_CLAUSE_DEPEND_INVALID instead of
	OMP_CLAUSE_DEPEND_SOURCE.
	(c_parser_omp_for_loop): Don't diagnose here linear clause together
	with ordered with argument.
	(c_parser_omp_simd): Don't diagnose ordered clause with argument on
	for simd.
	(OMP_ORDERED_DEPEND_CLAUSE_MASK): Add PRAGMA_OMP_CLAUSE_DOACROSS.
	(c_parser_omp_ordered): Handle also doacross and adjust for it
	diagnostic wording.
	* c-typeck.cc (c_finish_omp_clauses): Handle OMP_CLAUSE_DOACROSS.
	Don't handle OMP_CLAUSE_DEPEND_SOURCE and OMP_CLAUSE_DEPEND_SINK.

2022-08-17  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-08-17  Tobias Burnus  <tobias@codesourcery.com>
		    Chung-Lin Tang  <cltang@codesourcery.com>

	PR c++/104493
	* c-decl.cc (c_decl_attributes, finish_decl): Call omp_mappable_type
	instead of removed langhook.
	* c-typeck.cc (c_finish_omp_clauses): Likewise.

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-07-04  Tobias Burnus  <tobias@codesourcery.com>
		    Chung-Lin Tang  <cltang@codesourcery.com>
		    Thomas Schwinge  <thomas@codesourcery.com>

	* c-parser.cc (c_parser_omp_target_data, c_parser_omp_target_update,
	c_parser_omp_target_enter_data, c_parser_omp_target_exit_data): Set
	OMP_REQUIRES_TARGET_USED.
	(c_parser_omp_requires): Remove sorry.

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Reverted:
	2021-02-02  Chung-Lin Tang  <cltang@codesourcery.com>

	* c-parser.cc (c_parser_declaration_or_fndef): Set
	OMP_REQUIRES_TARGET_USED in omp_requires_mask if function has
	"omp declare target" attribute.

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-07-01  Tobias Burnus  <tobias@codesourcery.com>

	* c-parser.cc (c_parser_omp_target_enter_data,
	c_parser_omp_target_exit_data): Accept tofrom
	map-type modifier but use 'to' / 'from' internally.

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-06-07  Jakub Jelinek  <jakub@redhat.com>

	* c-parser.cc (c_parser_omp_clause_linear): Parse OpenMP 5.2
	style linear clause modifiers.  Set
	OMP_CLAUSE_LINEAR_OLD_LINEAR_MODIFIER flag on the clauses when
	old style modifiers are used.
	* c-typeck.cc (c_finish_omp_clauses): Only reject linear clause
	with val modifier on simd or for if the old style modifiers are
	used.

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-05-31  Jakub Jelinek  <jakub@redhat.com>

	* c-parser.cc (OMP_SCOPE_CLAUSE_MASK): Add firstprivate and allocate
	clauses.

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-05-28  Jakub Jelinek  <jakub@redhat.com>

	* c-parser.cc (c_parser_omp_declare_target): If OMP_CLAUSE_LINK was
	seen first, use "%<to%>" or "%<enter%>" depending on
	OMP_CLAUSE_ENTER_TO of the current clause, otherwise use
	"%<to%> or %<enter%>" wording.

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-05-27  Jakub Jelinek  <jakub@redhat.com>

	* c-parser.cc (c_parser_omp_clause_name): Parse enter clause.
	(c_parser_omp_all_clauses): For to clause on declare target, use
	OMP_CLAUSE_ENTER clause with OMP_CLAUSE_ENTER_TO instead of
	OMP_CLAUSE_TO_DECLARE clause.  Handle PRAGMA_OMP_CLAUSE_ENTER.
	(OMP_DECLARE_TARGET_CLAUSE_MASK): Add enter clause.
	(c_parser_omp_declare_target): Use OMP_CLAUSE_ENTER instead of
	OMP_CLAUSE_TO_DECLARE.
	* c-typeck.cc (c_finish_omp_clauses): Handle OMP_CLAUSE_ENTER instead
	of OMP_CLAUSE_TO_DECLARE, to OMP_CLAUSE_ENTER_TO use "to" as clause
	name in diagnostics instead of
	omp_clause_code_name[OMP_CLAUSE_CODE (c)].

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-05-24  Jakub Jelinek  <jakub@redhat.com>

	PR c/105378
	* c-parser.cc (OMP_TASKWAIT_CLAUSE_MASK): Add nowait clause.

2022-07-04  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-05-17  Jakub Jelinek  <jakub@redhat.com>

	* c-parser.cc (c_parser_omp_clause_depend): Parse
	inoutset depend-kind.
	(c_parser_omp_depobj): Likewise.

2022-06-30  Tobias Burnus  <tobias@codesourcery.com>

	* c-parser.cc (c_parser_omp_requires): Add missing %<...%> in error.

2022-03-17  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-typeck.cc (handle_omp_array_sections_1): Add check to ensure
	that clause is a map.

2022-05-12  Jakub Jelinek  <jakub@redhat.com>

	Backport from mainline:
	2022-05-12  Jakub Jelinek  <jakub@redhat.com>

	* c-parser.cc (c_parse_init): Register omp_all_memory as keyword
	if flag_openmp.
	(c_parser_postfix_expression): Diagnose uses of omp_all_memory
	in postfix expressions.
	(c_parser_omp_variable_list): Handle omp_all_memory in depend
	clause.
	* c-typeck.cc (c_finish_omp_clauses): Handle omp_all_memory
	keyword in depend clause as null_pointer_node, diagnose invalid
	uses.

2022-06-17  Chung-Lin Tang  <cltang@codesourcery.com>

	Backport from mainline:
	2022-06-17  Chung-Lin Tang  <cltang@codesourcery.com>

	* c-parser.cc (c_parser_omp_clause_name): Add case for uses_allocators
	clause.
	(c_parser_omp_clause_uses_allocators): New function.
	(c_parser_omp_all_clauses): Add PRAGMA_OMP_CLAUSE_USES_ALLOCATORS case.
	(OMP_TARGET_CLAUSE_MASK): Add PRAGMA_OMP_CLAUSE_USES_ALLOCATORS to mask.
	* c-typeck.cc (c_finish_omp_clauses): Add case handling for
	OMP_CLAUSE_USES_ALLOCATORS.

2022-04-20  Andrew Stubbs  <ams@codesourcery.com>

	* c-parser.cc (c_parser_omp_requires): Check requires unified_address
	for conflict with -foffload-memory=shared.

2022-03-10  Andrew Stubbs <ams@codesourcery.com>

	Backport of the patch posted at
	https://gcc.gnu.org/pipermail/gcc-patches/2022-March/591351.html

	* c-parser.cc (c_parser_omp_requires): Check compatibility of
	-foffload-memory option with requires directive.

2022-02-24  Chung-Lin Tang  <cltang@codesourcery.com>

	* c-typeck.cc (handle_omp_array_sections): Add handling for
	creating array-reference base-pointer attachment clause.

2022-02-18  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-parser.cc (c_parser_omp_construct): Move handling of
	PRAGMA_OMP_METADIRECTIVE from here...
	(c_parser_pragma): ...to here.
	(analyze_metadirective_body): Check that the bracket nesting level
	is also zero before stopping the adding of tokens on encountering a
	close brace.
	(c_parser_omp_metadirective): Modify function signature and update.
	Do not assert on remaining tokens if there has been a parse error.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-parser.cc (omp_target_device_selectors): New.
	(c_parser_omp_context_selector): Accept 'target_device' selector set.
	Treat 'device_num' selector as expression.
	(c_parser_omp_context_selector_specification): Handle 'target_device'
	selector set.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-parser.cc (c_parser_skip_to_end_of_block_or_statement): Track
	bracket depth separately from nesting depth.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-parser.cc (c_parser_skip_to_end_of_block_or_statement): Handle
	parentheses in statement.
	(c_parser_omp_metadirective): New prototype.
	(c_parser_omp_context_selector): Add extra argument.  Allow
	non-constant expressions.
	(c_parser_omp_context_selector_specification): Add extra argument and
	propagate it to c_parser_omp_context_selector.
	(analyze_metadirective_body): New.
	(c_parser_omp_metadirective): New.
	(c_parser_omp_construct): Handle PRAGMA_OMP_METADIRECTIVE.

2021-08-19  Chung-Lin Tang  <cltang@codesourcery.com>

	* c-typeck.cc (handle_omp_array_sections_1): Robustify non-contiguous
	array check and reject non-DECL base-pointer cases as unsupported.

2021-02-02  Chung-Lin Tang  <cltang@codesourcery.com>

	* c-parser.cc (c_parser_declaration_or_fndef): Set
	OMP_REQUIRES_TARGET_USED in omp_requires_mask if function has
	"omp declare target" attribute.
	(c_parser_omp_target_data): Set OMP_REQUIRES_TARGET_USED in
	omp_requires_mask.
	(c_parser_omp_target_enter_data): Likewise.
	(c_parser_omp_target_exit_data): Likewise.
	(c_parser_omp_requires): Adjust to only mention "not implemented yet"
	for OMP_REQUIRES_DYNAMIC_ALLOCATORS.

2020-08-19  Sandra Loosemore  <sandra@codesourcery.com>

	Add a "combined" flag for "acc kernels loop" etc directives.

	* c-parser.cc (c_parser_oacc_loop): Set OACC_LOOP_COMBINED.

2020-03-27  Sandra Loosemore  <sandra@codesourcery.com>

	* c-decl.cc (c_unwrap_for_init): New.
	(finish_function): Call c_oacc_annotate_loops_in_kernels_regions.

2022-02-03  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-parser.ccc (c_parser_omp_clause_map): Update call to
	c_parser_omp_variable_list.
	(c_parser_omp_clause_to): Update call to c_parser_omp_var_list_parens.
	(c_parser_omp_clause_from): Likewise.

2018-12-13  Cesar Philippidis  <cesar@codesourcery.com>
	    Nathan Sidwell  <nathan@acm.org>
	    Julian Brown  <julian@codesourcery.com>

	* c-parser.c (c_parser_omp_variable_list): New c_omp_region_type
	argument.  Use it to specialize handling of OMP_CLAUSE_REDUCTION for
	OpenACC.
	(c_parser_oacc_data_clause): Add region-type argument.
	(c_parser_oacc_data_clause_deviceptr): Likewise.
	(c_parser_omp_clause_reduction): Change is_omp boolean parameter to
	c_omp_region_type.  Update call to c_parser_omp_variable_list.
	(c_parser_oacc_all_clauses): Update calls to
	c_parser_omp_clause_reduction.
	(c_parser_omp_all_clauses): Likewise.
	(c_parser_oacc_cache): Update call to c_parser_omp_var_list_parens.
	* c-typeck.c (c_finish_omp_clauses): Emit an error on orphan OpenACC
	gang reductions.  Suppress user-defined reduction error for OpenACC.

2020-04-19  Chung-Lin Tang  <cltang@codesourcery.com>

	PR other/76739

	* c-typeck.cc (handle_omp_array_sections_1): Add 'bool &non_contiguous'
	parameter, adjust recursive call site, add cases for allowing
	pointer based multi-dimensional arrays for OpenACC.
	(handle_omp_array_sections): Adjust handle_omp_array_sections_1 call,
	handle non-contiguous case to create dynamic array map.
