2023-05-30  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2023-05-30  Tobias Burnus  <tobias@codesourcery.com>

	PR c/109999
	* c-parser.cc (c_parser_oacc_all_clauses,
	c_parser_omp_all_clauses): Improve error wording.

2023-05-30  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2023-04-25  Tobias Burnus  <tobias@codesourcery.com>

	* c-parser.cc (c_parser_omp_scan_loop_body): Handle
	zero exec statements before/after 'omp scan'.

2023-03-24  Frederik Harwath  <frederik@codesourcery.com>

	* c-parser.cc (c_parser_omp_nested_loop_transform_clauses):
	Add argument for the level of loop-nest at which the clauses
	appear, ...
	(c_parser_omp_tile): ... adjust use here,
	(c_parser_omp_unroll): ... and here,
	(c_parser_omp_for_loop): ... and here.  Stop treating loop
	transformations like intervening code, parse them, and adjust
	the loop-nest depth if necessary for tiling.

2023-03-24  Frederik Harwath  <frederik@codesourcery.com>

	* c-parser.cc (c_parser_omp_clause_unroll_full): Set new
	OMP_CLAUSE_TRANSFORM_LEVEL operand to default value.
	(c_parser_omp_clause_unroll_partial): Likewise.
	(c_parser_omp_tile_sizes): Likewise.
	(c_parser_omp_loop_transform_clause): Likewise.
	(c_parser_omp_nested_loop_transform_clauses): Likewise.
	(c_parser_omp_unroll): Likewise.

2023-03-24  Frederik Harwath  <frederik@codesourcery.com>

	* c-parser.cc (c_parser_nested_omp_unroll_clauses): Rename and
	generalize ...
	(c_parser_omp_nested_loop_transform_clauses): ... to this.
	(c_parser_omp_for_loop): Handle "omp tile" parsing in loop nests.
	(c_parser_omp_tile_sizes): Parse single "sizes" clause.
	(c_parser_omp_loop_transform_clause): New function.
	(c_parser_omp_tile): New function for parsing "omp tile"
	(c_parser_omp_unroll): Adjust to renaming.
	(c_parser_omp_construct): Handle PRAGMA_OMP_TILE.

2023-03-24  Frederik Harwath  <frederik@codesourcery.com>

	* c-parser.cc (c_parser_omp_clause_collapse): Adjust to renamings.
	(c_parser_oacc_clause_tile): Likewise.
	(c_parser_omp_for_loop): Likewise.
	* c-typeck.cc (c_finish_omp_clauses): Likewise.

2023-03-24  Frederik Harwath  <frederik@codesourcery.com>

	* c-parser.cc (c_parser_omp_clause_name): Handle "full" and
	"partial" clauses.
	(check_no_duplicate_clause): Change return type to bool and
	return check result.
	(c_parser_omp_clause_unroll_full): New function for parsing
	the "unroll clause".
	(c_parser_omp_clause_unroll_partial): New function for
	parsing the "partial" clause.
	(c_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_FULL
	and PRAGMA_OMP_CLAUSE_PARTIAL.
	(c_parser_nested_omp_unroll_clauses): New function for parsing
	"omp unroll" directives following another directive.
	(OMP_UNROLL_CLAUSE_MASK): New definition.
	(c_parser_omp_unroll): New function for parsing "omp unroll"
	loops that are not associated with another directive.
	(c_parser_omp_construct): Handle PRAGMA_OMP_UNROLL.
	* c-typeck.cc (c_finish_omp_clauses): Handle
	OMP_CLAUSE_UNROLL_FULL, OMP_CLAUSE_UNROLL_PARTIAL,
	and OMP_CLAUSE_UNROLL_NONE.

2023-02-01  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-parser.cc (c_parser_omp_variable_list): Set default motion
	modifier.
	(c_parser_omp_var_list_parens): Add new parameter with default.  Parse
	'present' motion modifier and apply.
	(c_parser_omp_clause_defaultmap): Parse 'present' in defaultmap.
	(c_parser_omp_clause_map): Parse 'present' modifier in map clauses.
	(c_parser_omp_clause_to): Allow use of 'present' in variable list.
	(c_parser_omp_clause_from): Likewise.
	(c_parser_omp_target_data): Allow map clauses with 'present'
	modifiers.
	(c_parser_omp_target_enter_data): Likewise.
	(c_parser_omp_target_exit_data): Likewise.
	(c_parser_omp_target): Likewise.

2022-03-17  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-typeck.cc (handle_omp_array_sections_1): Add check to ensure
	that clause is a map.

2022-06-17  Chung-Lin Tang  <cltang@codesourcery.com>

	Backport from mainline:
	2022-06-17  Chung-Lin Tang  <cltang@codesourcery.com>

	* c-parser.cc (c_parser_omp_clause_name): Add case for uses_allocators
	clause.
	(c_parser_omp_clause_uses_allocators): New function.
	(c_parser_omp_all_clauses): Add PRAGMA_OMP_CLAUSE_USES_ALLOCATORS case.
	(OMP_TARGET_CLAUSE_MASK): Add PRAGMA_OMP_CLAUSE_USES_ALLOCATORS to mask.
	* c-typeck.cc (c_finish_omp_clauses): Add case handling for
	OMP_CLAUSE_USES_ALLOCATORS.

2022-03-10  Andrew Stubbs  <ams@codesourcery.com>

	* c-parser.cc (c_parser_omp_requires): Allow "requires
	unified_share_memory" and "unified_address".

2022-02-24  Chung-Lin Tang  <cltang@codesourcery.com>

	* c-typeck.cc (handle_omp_array_sections): Add handling for
	creating array-reference base-pointer attachment clause.

2022-02-18  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-parser.cc (c_parser_omp_construct): Move handling of
	PRAGMA_OMP_METADIRECTIVE from here...
	(c_parser_pragma): ...to here.
	(analyze_metadirective_body): Check that the bracket nesting level
	is also zero before stopping the adding of tokens on encountering a
	close brace.
	(c_parser_omp_metadirective): Modify function signature and update.
	Do not assert on remaining tokens if there has been a parse error.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-parser.cc (omp_target_device_selectors): New.
	(c_parser_omp_context_selector): Accept 'target_device' selector set.
	Treat 'device_num' selector as expression.
	(c_parser_omp_context_selector_specification): Handle 'target_device'
	selector set.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-parser.cc (c_parser_skip_to_end_of_block_or_statement): Handle
	parentheses in statement.
	(c_parser_omp_metadirective): New prototype.
	(c_parser_omp_context_selector): Add extra argument.  Allow
	non-constant expressions.
	(c_parser_omp_context_selector_specification): Add extra argument and
	propagate it to c_parser_omp_context_selector.
	(analyze_metadirective_body): New.
	(c_parser_omp_metadirective): New.
	(c_parser_omp_construct): Handle PRAGMA_OMP_METADIRECTIVE.

2021-08-19  Chung-Lin Tang  <cltang@codesourcery.com>

	* c-typeck.cc (handle_omp_array_sections_1): Robustify non-contiguous
	array check and reject non-DECL base-pointer cases as unsupported.

2020-08-19  Sandra Loosemore  <sandra@codesourcery.com>

	Add a "combined" flag for "acc kernels loop" etc directives.

	* c-parser.cc (c_parser_oacc_loop): Set OACC_LOOP_COMBINED.

2020-03-27  Sandra Loosemore  <sandra@codesourcery.com>

	* c-decl.cc (c_unwrap_for_init): New.
	(finish_function): Call c_oacc_annotate_loops_in_kernels_regions.

2022-02-03  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-parser.ccc (c_parser_omp_clause_map): Update call to
	c_parser_omp_variable_list.
	(c_parser_omp_clause_to): Update call to c_parser_omp_var_list_parens.
	(c_parser_omp_clause_from): Likewise.

2018-12-13  Cesar Philippidis  <cesar@codesourcery.com>
	    Nathan Sidwell  <nathan@acm.org>
	    Julian Brown  <julian@codesourcery.com>

	* c-parser.c (c_parser_omp_variable_list): New c_omp_region_type
	argument.  Use it to specialize handling of OMP_CLAUSE_REDUCTION for
	OpenACC.
	(c_parser_oacc_data_clause): Add region-type argument.
	(c_parser_oacc_data_clause_deviceptr): Likewise.
	(c_parser_omp_clause_reduction): Change is_omp boolean parameter to
	c_omp_region_type.  Update call to c_parser_omp_variable_list.
	(c_parser_oacc_all_clauses): Update calls to
	c_parser_omp_clause_reduction.
	(c_parser_omp_all_clauses): Likewise.
	(c_parser_oacc_cache): Update call to c_parser_omp_var_list_parens.
	* c-typeck.c (c_finish_omp_clauses): Emit an error on orphan OpenACC
	gang reductions.  Suppress user-defined reduction error for OpenACC.

2020-04-19  Chung-Lin Tang  <cltang@codesourcery.com>

	PR other/76739

	* c-typeck.cc (handle_omp_array_sections_1): Add 'bool &non_contiguous'
	parameter, adjust recursive call site, add cases for allowing
	pointer based multi-dimensional arrays for OpenACC.
	(handle_omp_array_sections): Adjust handle_omp_array_sections_1 call,
	handle non-contiguous case to create dynamic array map.
