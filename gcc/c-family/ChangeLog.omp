2023-03-27  Frederik Harwath  <frederik@codesourcery.com>

	* c-omp.cc (c_omp_directives): Add PRAGMA_OMP_TILE.
	* c-pragma.cc (omp_pragmas_simd): Likewise.
	* c-pragma.h (enum pragma_kind): Add PRAGMA_OMP_TILE.
	(enum pragma_omp_clause): Add PRAGMA_OMP_CLAUSE_TILE

2023-03-27  Frederik Harwath  <frederik@codesourcery.com>

	* c-omp.cc (c_oacc_split_loop_clauses): Adjust to renamings.

2023-03-27  Frederik Harwath  <frederik@codesourcery.com>

	* c-gimplify.cc (c_genericize_control_stmt): Handle OMP_UNROLL.
	* c-omp.cc: Add "unroll" to omp_directives[].
	* c-pragma.cc: Add "unroll" to omp_pragmas_simd[].
	* c-pragma.h (enum pragma_kind): Add PRAGMA_OMP_UNROLL to
	pragma_kind and adjust PRAGMA_OMP__LAST_.
	(enum pragma_omp_clause): Add PRAGMA_OMP_CLAUSE_FULL and
	PRAGMA_OMP_CLAUSE_PARTIAL.

2022-10-04  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-10-04  Jakub Jelinek  <jakub@redhat.com>

	* c-omp.cc (c_omp_directives): Uncomment begin declare target
	entry.

2022-09-27  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-09-27  Jakub Jelinek  <jakub@redhat.com>

	* c-pragma.h (enum pragma_kind): Add PRAGMA_OMP_ASSUME,
	PRAGMA_OMP_ASSUMES and PRAGMA_OMP_BEGIN.  Rename
	PRAGMA_OMP_END_DECLARE_TARGET to PRAGMA_OMP_END.
	* c-pragma.cc (omp_pragmas): Add assumes and begin.
	For end rename PRAGMA_OMP_END_DECLARE_TARGET to PRAGMA_OMP_END.
	(omp_pragmas_simd): Add assume.
	* c-common.h (c_omp_directives): Declare.
	* c-omp.cc (omp_directives): Rename to ...
	(c_omp_directives): ... this.  No longer static.  Uncomment
	assume, assumes, begin assumes and end assumes entries.
	In end declare target entry rename PRAGMA_OMP_END_DECLARE_TARGET
	to PRAGMA_OMP_END.
	(c_omp_categorize_directive): Adjust for omp_directives to
	c_omp_directives renaming.

2022-07-06  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-09-06  Jakub Jelinek  <jakub@redhat.com>

	PR c/106836
	* c-omp.cc (c_omp_split_clauses): Handle OMP_CLAUSE_DOACROSS.

2022-07-05  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-05-27  Jakub Jelinek  <jakub@redhat.com>

	* c-pragma.h (enum pragma_omp_clause): Add PRAGMA_OMP_CLAUSE_ENTER.

2022-07-04  Tobias Burnus  <tobias@codesourcery.com>

	Backport from mainline:
	2022-05-17  Jakub Jelinek  <jakub@redhat.com>

	* c-omp.cc (c_finish_omp_depobj): Handle
	OMP_CLAUSE_DEPEND_INOUTSET.

2022-04-15  Kwok Cheung Yeung  <kcy@codesourcery.com>

	gcc/c-family/
	* c-omp.cc (check_and_annotate_for_loop): Check that the DECL_INITIAL
	is non-NULL before using.

2022-05-12  Jakub Jelinek  <jakub@redhat.com>

	Backport from mainline:
	2022-05-12  Jakub Jelinek  <jakub@redhat.com>

	* c-common.h (enum rid): Add RID_OMP_ALL_MEMORY.
	* c-omp.cc (c_finish_omp_depobj): Don't build_fold_addr_expr
	if null_pointer_node.

2022-06-17  Chung-Lin Tang  <cltang@codesourcery.com>

	Backport from mainline:
	2022-06-17  Chung-Lin Tang  <cltang@codesourcery.com>

	* c-omp.cc (c_omp_split_clauses): Add OMP_CLAUSE_USES_ALLOCATORS case.
	* c-pragma.h (enum pragma_omp_clause): Add PRAGMA_OMP_CLAUSE_USES_ALLOCATORS.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-omp.cc (c_omp_expand_metadirective_r): New.
	(c_omp_expand_metadirective): New.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* c-common.h (enum c_omp_directive_kind): Add C_OMP_DIR_META.
	(c_omp_expand_metadirective): New prototype.
	* c-gimplify.cc (genericize_omp_metadirective_stmt): New.
	(c_genericize_control_stmt): Handle OMP_METADIRECTIVE tree nodes.
	* c-omp.cc (omp_directives): Classify metadirectives as C_OMP_DIR_META.
	(c_omp_expand_metadirective): New stub function.
	* c-pragma.cc (omp_pragmas): Add entry for metadirective.
	* c-pragma.h (enum pragma_kind): Add PRAGMA_OMP_METADIRECTIVE.

2020-08-30  Sandra Loosemore  <sandra@codesourcery.com>

	* c-omp.cc (end_test_ok_for_annotation_r): New.
	(end_test_ok_for_annotation): New.
	(check_and_annotate_for_loop): Use the new helper function.

2020-08-30  Sandra Loosemore  <sandra@codesourcery.com>

	* c-omp.cc (annotate_for_loop): Move initializer processing...
	(check_and_annotate_for_loop): ... to here.  Allow the loop
	variable as either operand to the condition.

2020-08-22  Sandra Loosemore  <sandra@codesourcery.com>

	Allow annotation of loops containing calls to builtins in
	kernels regions.

	* c-omp.cc (annotate_loops_in_kernels_regions): Test for
	calls to builtins.

2020-08-19  Sandra Loosemore  <sandra@codesourcery.com>

	Annotate inner loops in "acc kernels loop" directives (C/C++).

	* c-omp.cc (annotate_loops_in_kernels_regions): Process inner
	loops in combined "acc kernels loop" directives.

2020-03-27  Sandra Loosemore  <sandra@codesourcery.com>

	* c-common.h (c_oacc_annotate_loops_in_kernels_regions): Declare.
	* c-omp.cc: Include tree-iterator.h
	(enum annotation_state): New.
	(struct annotation_info): New.
	(do_not_annotate_loop): New.
	(do_not_annotate_loop_nest): New.
	(annotation_error): New.
	(c_finish_omp_for_internal): Split from c_finish_omp_for.  Use
	annotation_error function.  Code refactoring to avoid destructive
	changes that cannot be undone in case of error.
	(is_local_var): New.
	(lang_specific_unwrap_initializer): New.
	(annotate_for_loop): New.
	(check_and_annotate_for_loop): New.
	(annotate_loops_in_kernels_regions): New.
	(c_oacc_annotate_loops_in_kernels_regions): New.
	* c.opt (Wopenacc-kernels-annotate-loops): New.
	(fopenacc-kernels-annotate-loops): New.
