2023-08-10  Julian Brown  <julian@codesourcery.com>

	* parser.cc (cp_parser_omp_var_list_no_open): Support array-shaping
	operator in 'declare mapper' definitions.
	(cp_parser_omp_clause_from_to): Add parsing for mapper modifier.
	(cp_parser_omp_clause_map): Pass C_ORT_OMP_DECLARE_MAPPER to
	cp_parser_omp_var_list_no_open in mapper definitions.
	(cp_parser_omp_target_update): Instantiate mappers.

2023-08-10  Julian Brown  <julian@codesourcery.com>

	* pt.cc (tsubst_omp_clauses): Use C_ORT_OMP_DECLARE_MAPPER.
	(tsubst_expr): Likewise.

2023-07-06  Julian Brown  <julian@codesourcery.com>

	* parser.cc (cp_parser_omp_target_data): Instantiate mappers for 'omp
	target data'.
	(cp_parser_omp_target_enter_data): Instantiate mappers for 'omp target
	enter data'.
	(cp_parser_omp_target_exit_data): Instantiate mappers for 'omp target
	exit data'.
	(cp_parser_omp_target): Add c_omp_region_type argument to
	c_omp_instantiate_mappers call.
	* pt.cc (tsubst_omp_clauses): Instantiate mappers for OMP regions other
	than just C_ORT_OMP_TARGET.
	(tsubst_expr): Update call to tsubst_omp_clauses for OMP_TARGET_UPDATE,
	OMP_TARGET_ENTER_DATA, OMP_TARGET_EXIT_DATA stanza.
	* semantics.cc (cxx_omp_map_array_section): Avoid calling
	build_array_ref for non-array/non-pointer bases (error reported
	already).

2023-07-03  Julian Brown  <julian@codesourcery.com>

	* cp-objcp-common.cc (cp_common_init_ts): Add array-shape cast
	support.
	* cp-tree.def (OMP_ARRAYSHAPE_CAST_EXPR): Add tree code.
	* cp-tree.h (DECLTYPE_FOR_OMP_ARRAYSHAPE_CAST): Add flag.
	(cp_omp_create_arrayshape_type, cp_build_omp_arrayshape_cast): Add
	prototypes.
	(grok_omp_array_section, build_omp_array_section): Add stride
	parameters.
	* decl.cc (create_anon_array_type): New function.
	(cp_omp_create_arrayshape_type): New function.
	* decl2.cc (grok_omp_array_section): Add stride parameter.
	(min_vis_expr_r): Add OMP_ARRAYSHAPE_CAST_EXPR support.
	* error.cc (dump_expr): Add stride support for OMP_ARRAY_SECTION.
	* mangle.cc (write_expression): Add OMP_ARRAYSHAPE_CAST_EXPR support.
	* operators.def (OMP_ARRAYSHAPE_CAST_EXPR): Add.
	* parser.cc (cp_parser_new): Initialise omp_array_shaping_op_p and
	omp_has_array_shape_p fields.
	(cp_parser_statement_expr): Don't allow array shaping op in statement
	exprs.
	(cp_parser_postfix_open_square_expression): Add stride parsing for
	array sections.  Use array section code to represent array refs if we
	have an array-shaping operator.
	(cp_parser_parenthesized_expression_list): Don't allow array-shaping
	op here.
	(cp_parser_cast_expression): Add array-shaping operator parsing.
	(cp_parser_lambda_expression): Don't allow array-shaping op in lambda
	body.
	(cp_parser_braced_list): Don't allow array-shaping op in braced list.
	(struct omp_dim): Add stride field.
	(cp_parser_var_list_no_open): Add stride/array shape support.
	(cp_parser_omp_target_update): Handle noncontiguous updates.
	* parser.h (cp_parser): Add omp_array_shaping_op_p and
	omp_has_array_shape_p fields.
	* pt.cc (tsubst): Add array-shape cast support.
	(tsubst_copy, tsubst_copy_and_build): Likewise. Add stride support for
	OMP_ARRAY_SECTION.
	(tsubst_omp_clause_decl): Add stride support for OMP_ARRAY_SECTION.
	* semantics.cc (handle_omp_array_sections_1): Add DISCONTIGUOUS
	parameter and stride support.
	(omp_array_section_low_bound): New function.
	(handle_omp_array_sections): Add DISCONTIGUOUS parameter and stride
	support.
	(finish_omp_clauses): Update calls to handle_omp_array_sections, and
	add noncontiguous array update support.
	(cp_build_omp_arrayshape_cast): New function.
	* typeck.cc (structural_comptypes): Add array-shape cast support.
	(build_omp_array_section): Add stride parameter.
	(check_for_casting_away_constness): Add OMP_ARRAYSHAPE_CAST_EXPR
	support.

2023-07-03  Julian Brown  <julian@codesourcery.com>

	* semantics.cc (handle_omp_array_sections): Pass pointer to clause
	instead of clause.  Add PNEXT return parameter for next clause in list
	to process.
	(finish_omp_clauses): Update calls to handle_omp_array_sections.
	Handle cases where initial clause might be replaced.

2023-06-30  Julian Brown  <julian@codesourcery.com>

	* constexpr.cc (reduced_constant_expression_p): Add OMP_DECLARE_MAPPER
	case.
	(cxx_eval_constant_expression, potential_constant_expression_1):
	Likewise.
	* cp-gimplify.cc (cxx_omp_finish_mapper_clauses): New function.
	* cp-objcp-common.h (LANG_HOOKS_OMP_FINISH_MAPPER_CLAUSES,
	LANG_HOOKS_OMP_MAPPER_LOOKUP, LANG_HOOKS_OMP_EXTRACT_MAPPER_DIRECTIVE,
	LANG_HOOKS_OMP_MAP_ARRAY_SECTION): Define langhooks.
	* cp-tree.h (lang_decl_base): Add omp_declare_mapper_p field.  Recount
	spare bits comment.
	(DECL_OMP_DECLARE_MAPPER_P): New macro.
	(omp_mapper_id, cp_check_omp_declare_mapper, omp_instantiate_mappers,
	cxx_omp_finish_mapper_clauses, cxx_omp_mapper_lookup,
	cxx_omp_extract_mapper_directive, cxx_omp_map_array_section: Add
	prototypes.
	* decl.cc (check_initializer): Add OpenMP declare mapper support.
	(cp_finish_decl): Set DECL_INITIAL for OpenMP declare mapper var decls
	as appropriate.
	* decl2.cc (mark_used): Instantiate OpenMP "declare mapper" magic var
	decls.
	* error.cc (dump_omp_declare_mapper): New function.
	(dump_simple_decl): Use above.
	* parser.cc (cp_parser_omp_clause_map): Add KIND parameter.  Support
	"mapper" modifier.
	(cp_parser_omp_all_clauses): Add KIND argument to
	cp_parser_omp_clause_map call.
	(cp_parser_omp_target): Call omp_instantiate_mappers before
	finish_omp_clauses.
	(cp_parser_omp_declare_mapper): New function.
	(cp_parser_omp_declare): Add "declare mapper" support.
	* pt.cc (tsubst_decl): Adjust name of "declare mapper" magic var decls
	once we know their type.
	(tsubst_omp_clauses): Call omp_instantiate_mappers before
	finish_omp_clauses, for target regions.
	(tsubst_expr): Support OMP_DECLARE_MAPPER nodes.
	(instantiate_decl): Instantiate initialiser (i.e definition) for OpenMP
	declare mappers.
	* semantics.cc (gimplify.h): Include.
	(omp_mapper_id, omp_mapper_lookup, omp_extract_mapper_directive,
	cxx_omp_map_array_section, cp_check_omp_declare_mapper): New functions.
	(finish_omp_clauses): Delete GOMP_MAP_PUSH_MAPPER_NAME and
	GOMP_MAP_POP_MAPPER_NAME artificial clauses.
	(omp_target_walk_data): Add MAPPERS field.
	(finish_omp_target_clauses_r): Scan for uses of struct/union/class type
	variables.
	(finish_omp_target_clauses): Create artificial mapper binding clauses
	for used structs/unions/classes in offload region.

2023-06-30  Julian Brown  <julian@codesourcery.com>

	* constexpr.cc (potential_consant_expression_1): Handle
	OMP_ARRAY_SECTION.
	* cp-tree.h (grok_omp_array_section, build_omp_array_section): Add
	prototypes.
	* decl2.cc (grok_omp_array_section): New function.
	* error.cc (dump_expr): Handle OMP_ARRAY_SECTION.
	* parser.cc (cp_parser_new): Initialize parser->omp_array_section_p.
	(cp_parser_statement_expr): Disallow array sections.
	(cp_parser_postfix_open_square_expression): Support OMP_ARRAY_SECTION
	parsing.
	(cp_parser_parenthesized_expression_list, cp_parser_lambda_expression,
	cp_parser_braced_list): Disallow array sections.
	(cp_parser_omp_var_list_no_open): Remove ALLOW_DEREF parameter, add
	MAP_LVALUE in its place.  Support generalised lvalue parsing for
	OpenMP map, to and from clauses.  Use OMP_ARRAY_SECTION
	code instead of TREE_LIST to represent OpenMP array sections.
	(cp_parser_omp_var_list): Remove ALLOW_DEREF parameter, add MAP_LVALUE.
	Pass to cp_parser_omp_var_list_no_open.
	(cp_parser_oacc_data_clause): Update call to cp_parser_omp_var_list.
	(cp_parser_omp_clause_map): Add sk_omp scope around
	cp_parser_omp_var_list_no_open call.
	* parser.h (cp_parser): Add omp_array_section_p field.
	* pt.cc (tsubst, tsubst_copy, tsubst_omp_clause_decl,
	tsubst_copy_and_build): Add OMP_ARRAY_SECTION support.
	* semantics.cc (handle_omp_array_sections_1, handle_omp_array_sections,
	cp_oacc_check_attachments, finish_omp_clauses): Use OMP_ARRAY_SECTION
	instead of TREE_LIST where appropriate.  Handle more types of map
	expression.
	* typeck.cc (build_omp_array_section): New function.

2023-06-19  Julian Brown  <julian@codesourcery.com>

	* parser.cc (cp_parser_oacc_all_clauses): Add TARGET parameter. Use
	to select region type for finish_omp_clauses call.
	(cp_parser_omp_target_enter_data): Support GOMP_MAP_ATTACH kind.
	(cp_parser_omp_target_exit_data): Support GOMP_MAP_DETACH kind.
	(cp_parser_oacc_declare): Update call to cp_parser_oacc_all_clauses.
	(cp_parser_oacc_loop): Update calls to cp_parser_oacc_all_clauses.
	(cp_parser_oacc_compute): Likewise.
	* pt.cc (tsubst_expr): Use C_ORT_ACC_TARGET for call to
	tsubst_omp_clauses for compute regions.
	* semantics.cc (cp_omp_address_inspector): New class, derived from
	c_omp_address_inspector.
	(handle_omp_array_sections_1, handle_omp_array_sections,
	finish_omp_clauses): Use cp_omp_address_inspector class and OMP address
	tokenizer to analyze and expand OpenMP map clause expressions.  Fix
	some diagnostics.  Support C_ORT_ACC_TARGET.

2023-06-19  Julian Brown  <julian@codesourcery.com>

	* semantics.cc (finish_omp_clause): Add braces and reindent
	OMP_CLAUSE_TO/OMP_CLAUSE_FROM/OMP_CLAUSE__CACHE_ stanza.

2023-06-19  Julian Brown  <julian@codesourcery.com>

	Revert:
	2022-02-24  Chung-Lin Tang  <cltang@codesourcery.com>

	* semantics.cc (handle_omp_array_sections): Add handling for
	creating array-reference base-pointer attachment clause.

2023-06-13  Sandra Loosemore  <sandra@codesourcery.com>

	* cp-tree.h (cp_convert_omp_range_for): Adjust declaration.
	* parser.cc (struct omp_for_parse_data): New.
	(cp_parser_postfix_expression): Diagnose calls to OpenMP runtime
	in intervening code.
	(check_omp_intervening_code): New.
	(cp_parser_statement_seq_opt): Special-case nested OMP loops and
	blocks in intervening code.
	(cp_parser_iteration_statement): Reject loops in intervening code.
	(cp_parser_omp_for_loop_init): Expand comments and tweak the
	interface slightly to better distinguish input/output parameters.
	(cp_parser_omp_range_for): Likewise.
	(cp_convert_omp_range_for): Likewise.
	(cp_parser_see_omp_loop_nest): New.
	(cp_parser_omp_loop_nest): New, split from cp_parser_omp_for_loop
	and largely rewritten.  Add more comments.
	(struct sit_data, substitute_in_tree_walker, substitute_in_tree):
	New.
	(fixup_blocks_walker): New.
	(cp_parser_omp_for_loop): Rewrite to use recursive descent instead
	of a loop.  Add logic to reshuffle the bits of code collected
	during parsing so intervening code gets moved to the loop body.
	(cp_parser_omp_loop): Remove call to finish_omp_for_block, which
	is now redundant.
	(cp_parser_omp_simd): Likewise.
	(cp_parser_omp_for): Likewise.
	(cp_parser_omp_distribute): Likewise.
	(cp_parser_oacc_loop): Likewise.
	(cp_parser_omp_taskloop): Likewise.
	(cp_parser_pragma): Reject OpenMP pragmas in intervening code.
	* parser.h (struct cp_parser): Add omp_for_parse_state field.
	* pt.cc (tsubst_omp_for_iterator): Adjust call to
	cp_convert_omp_range_for.
	* semantics.cc (struct fofb_data, finish_omp_for_block_walker): New.
	(finish_omp_for_block): Allow variables to be bound in a BIND_EXPR
	nested inside BIND instead of directly in BIND itself.

2023-06-12  Tobias Burnus  <tobias@codesourcery.com>

	Backported from mainline:
	2023-06-12  Tobias Burnus  <tobias@codesourcery.com>

	* parser.cc (cp_parser_omp_clause_map): Reword error message for
	clearness especially with 'omp target (enter/exit) data.'
	* semantics.cc (handle_omp_array_sections): Handle
	GOMP_MAP_{ALWAYS_,}PRESENT_{TO,TOFROM,FROM,ALLOC} enum values.

2023-06-07  Tobias Burnus  <tobias@codesourcery.com>

	Backported from mainline:
	2023-06-06  Kwok Cheung Yeung  <kcy@codesourcery.com>
		    Tobias Burnus  <tobias@codesourcery.com>

	* parser.cc (cp_parser_omp_clause_defaultmap,
	cp_parser_omp_clause_map): Parse 'present'.
	(cp_parser_omp_clause_from_to): New; parse to/from
	clauses with optional 'present' modifier.
	(cp_parser_omp_all_clauses): Update call.
	(cp_parser_omp_target_data, cp_parser_omp_target_enter_data,
	cp_parser_omp_target_exit_data): Handle new enum value for
	'present' mapping.
	* semantics.cc (finish_omp_target): Likewise.

2023-06-07  Tobias Burnus  <tobias@codesourcery.com>

	Reverted:
	2023-02-01  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* parser.cc (cp_parser_omp_var_list_no_open): Add new parameter with
	default.  Parse	'present' motion modifier and apply.
	(cp_parser_omp_clause_defaultmap): Parse 'present' in defaultmap.
	(cp_parser_omp_clause_map): Parse 'present' modifier in map clauses.
	(cp_parser_omp_all_clauses): Allow use of 'present' in 'to' and 'from'
	clauses.
	(cp_parser_omp_target_data): Allow map clauses with 'present'
	modifiers.
	(cp_parser_omp_target_enter_data): Likewise.
	(cp_parser_omp_target_exit_data): Likewise.
	* semantics.cc (finish_omp_target): Accept map clauses with 'present'
	modifiers.

2023-05-30  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2023-05-30  Tobias Burnus  <tobias@codesourcery.com>

	PR c/109999
	* parser.cc (cp_parser_oacc_all_clauses,
	cp_parser_omp_all_clauses): Improve error wording.

2023-05-30  Tobias Burnus  <tobias@codesourcery.com>

	Backported from master:
	2023-04-25  Tobias Burnus  <tobias@codesourcery.com>

	* parser.cc (cp_parser_omp_scan_loop_body): Handle
	zero exec statements before/after 'omp scan'.

2023-05-12  Julian Brown  <julian@codesourcery.com>

	* decl2.cc (tree-inline.h): Include.
	(static_init_fini_fns): Bump to four entries. Update comment.
	(start_objects, start_partial_init_fini_fn): Add 'omp_target'
	parameter. Support "declare target" decls. Update forward declaration.
	(emit_partial_init_fini_fn): Add 'host_fn' parameter. Return tree for
	the created function. Support "declare target".
	(OMP_SSDF_IDENTIFIER): New macro.
	(partition_vars_for_init_fini): Support partitioning "declare target"
	variables also.
	(generate_ctor_or_dtor_function): Add 'omp_target' parameter. Support
	"declare target" decls.
	(c_parse_final_cleanups): Support constructors/destructors on OpenMP
	offload targets.

2023-03-24  Frederik Harwath  <frederik@codesourcery.com>

	* parser.cc (cp_parser_is_pragma): New function.
	(cp_parser_omp_nested_loop_transform_clauses):
	Add argument for the level of loop-nest at which the clauses
	appear, ...
	(cp_parser_omp_tile): ... adjust use here,
	(cp_parser_omp_unroll): ... and here,
	(cp_parser_omp_for_loop): ... and here.  Stop treating loop.

2023-03-24  Frederik Harwath  <frederik@codesourcery.com>

	* parser.cc (cp_parser_omp_clause_unroll_full): Set new
	OMP_CLAUSE_TRANSFORM_LEVEL operand to default value.
	(cp_parser_omp_clause_unroll_partial): Likewise.
	(cp_parser_omp_tile_sizes): Likewise.
	(cp_parser_omp_loop_transform_clause): Likewise.
	(cp_parser_omp_nested_loop_transform_clauses): Likewise.
	(cp_parser_omp_unroll): Likewise.
	* pt.cc (tsubst_omp_clauses): Adjust OMP_CLAUSE_UNROLL_PARTIAL
	and OMP_CLAUSE_TILE handling to changed number of operands.

2023-03-24  Frederik Harwath  <frederik@codesourcery.com>

	* parser.cc (cp_parser_omp_clause_unroll_partial): Adjust.
	(cp_parser_nested_omp_unroll_clauses): Rename ...
	(cp_parser_omp_nested_loop_transform_clauses): ... to this.
	(cp_parser_omp_for_loop): Handle "omp tile" parsing in loop nests.
	(cp_parser_omp_tile_sizes): New function, parses single "sizes" clause
	(cp_parser_omp_tile): New function for parsing "omp tile".
	(cp_parser_omp_loop_transform_clause): New  function.
	(cp_parser_omp_unroll): Adjust to renaming.
	(cp_parser_omp_construct): Handle PRAGMA_OMP_TILE.
	(cp_parser_pragma): Likewise.
	* pt.cc (tsubst_omp_clauses): Handle OMP_CLAUSE_TILE.
	* semantics.cc (finish_omp_clauses): Likewise.

2023-03-24  Frederik Harwath  <frederik@codesourcery.com>

	* parser.cc (cp_parser_oacc_clause_tile): Adjust to renamings.
	(cp_parser_omp_clause_collapse): Likewise.
	(cp_parser_omp_for_loop): Likewise.
	* pt.cc (tsubst_omp_clauses): Likewise.
	* semantics.cc (finish_omp_clauses): Likewise.
	(finish_omp_for): Likewise.

2023-03-24  Frederik Harwath  <frederik@codesourcery.com>

	* cp-gimplify.cc (cp_gimplify_expr): Handle OMP_UNROLL.
	(cp_fold_r): Likewise.
	(cp_genericize_r): Likewise.
	* parser.cc (cp_parser_omp_clause_name): Handle "full" clause.
	(check_no_duplicate_clause): Change return type to bool and
	return check result.
	(cp_parser_omp_clause_unroll_full): New function for parsing
	the "unroll clause".
	(cp_parser_omp_clause_unroll_partial): New function for
	parsing the "partial" clause.
	(cp_parser_omp_all_clauses): Handle OMP_CLAUSE_UNROLL and
	OMP_CLAUSE_FULL.
	(cp_parser_nested_omp_unroll_clauses): New function for parsing
	"omp unroll" directives following another directive.
	(cp_parser_omp_for_loop): Handle "omp unroll" directives
	between directive and loop.
	(OMP_UNROLL_CLAUSE_MASK): New definition.
	(cp_parser_omp_unroll): New function for parsing "omp unroll"
	loops that are not associated with another directive.

	(cp_parser_omp_construct): Handle PRAGMA_OMP_UNROLL.
	(cp_parser_pragma): Handle PRAGMA_OMP_UNROLL.
	* pt.cc (tsubst_omp_clauses): Handle
	OMP_CLAUSE_UNROLL_PARTIAL, OMP_CLAUSE_UNROLL_FULL, and
	OMP_CLAUSE_UNROLL_NONE.
	(tsubst_expr): Handle OMP_UNROLL.
	* semantics.cc (finish_omp_clauses): Handle
	OMP_CLAUSE_UNROLL_FULL, OMP_CLAUSE_UNROLL_PARTIAL,
	and OMP_CLAUSE_UNROLL_NONE.

2023-02-01  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* parser.cc (cp_parser_omp_var_list_no_open): Add new parameter with
	default.  Parse	'present' motion modifier and apply.
	(cp_parser_omp_clause_defaultmap): Parse 'present' in defaultmap.
	(cp_parser_omp_clause_map): Parse 'present' modifier in map clauses.
	(cp_parser_omp_all_clauses): Allow use of 'present' in 'to' and 'from'
	clauses.
	(cp_parser_omp_target_data): Allow map clauses with 'present'
	modifiers.
	(cp_parser_omp_target_enter_data): Likewise.
	(cp_parser_omp_target_exit_data): Likewise.
	* semantics.cc (finish_omp_target): Accept map clauses with 'present'
	modifiers.

2022-03-17  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* semantics.cc (handle_omp_array_sections_1):  Add check to ensure
	that clause is a map.

2022-06-17  Chung-Lin Tang  <cltang@codesourcery.com>

	Backport from mainline:
	2022-06-17  Chung-Lin Tang  <cltang@codesourcery.com>

	* parser.cc (cp_parser_omp_clause_name): Add case for uses_allocators
	clause.
	(cp_parser_omp_clause_uses_allocators): New function.
	(cp_parser_omp_all_clauses): Add PRAGMA_OMP_CLAUSE_USES_ALLOCATORS case.
	(OMP_TARGET_CLAUSE_MASK): Add PRAGMA_OMP_CLAUSE_USES_ALLOCATORS to mask.
	* semantics.cc (finish_omp_clauses): Add case handling for
	OMP_CLAUSE_USES_ALLOCATORS.

2022-03-10  Andrew Stubbs  <ams@codesourcery.com>

	* parser.cc (cp_parser_omp_requires): Allow "requires
	unified_share_memory" and "unified_address".

2022-02-24  Chung-Lin Tang  <cltang@codesourcery.com>

	* semantics.cc (handle_omp_array_sections): Add handling for
	creating array-reference base-pointer attachment clause.

2022-02-18  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* parser.cc (cp_parser_omp_construct): Move handling of
	PRAGMA_OMP_METADIRECTIVE from here...
	(cp_parser_pragma): ...to here.
	(analyze_metadirective_body): Check that the bracket
	nesting level is also zero before stopping the adding of tokens on
	encountering a close brace.
	(cp_parser_omp_metadirective): Modify function signature and update.
	Do not assert on remaining tokens if there has been a parse error.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* parser.cc (omp_target_device_selectors): New.
	(cp_parser_omp_context_selector): Accept 'target_device' selector set.
	Treat 'device_num' selector as expression.
	(cp_parser_omp_context_selector_specification): Handle 'target_device'
	selector set.

2022-01-25  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* parser.cc (cp_parser_skip_to_end_of_block_or_statement): Handle
	parentheses.
	(cp_parser_omp_context_selector): Add extra argument.  Allow
	non-constant expressions.
	(cp_parser_omp_context_selector_specification): Add extra argument and
	propagate to cp_parser_omp_context_selector.
	(analyze_metadirective_body): New.
	(cp_parser_omp_metadirective): New.
	(cp_parser_omp_construct): Handle PRAGMA_OMP_METADIRECTIVE.
	(cp_parser_pragma): Handle PRAGMA_OMP_METADIRECTIVE.

2021-08-19  Chung-Lin Tang  <cltang@codesourcery.com>

	* semantics.cc (handle_omp_array_sections_1): Robustify non-contiguous
	array check and reject non-DECL base-pointer cases as unsupported.

2021-02-01  Chung-Lin Tang  <cltang@codesourcery.com>

	* semantics.cc (finish_omp_clauses):  Adjust to allow duplicate
	mapped variables for OpenMP.

2020-08-19  Sandra Loosemore  <sandra@codesourcery.com>

	Add a "combined" flag for "acc kernels loop" etc directives.

	* parser.cc (cp_parser_oacc_loop): Set OACC_LOOP_COMBINED.

2020-03-31  Sandra Loosemore  <sandra@codesourcery.com>

	* semantics.cc (handle_omp_array_sections_1): Call STRIP_NOPS
	on length and low_bound;
	(handle_omp_array_sections): Likewise.

2020-03-27  Sandra Loosemore  <sandra@codesourcery.com>

	* decl.cc (cp_unwrap_for_init): New.
	(finish_function): Call c_oacc_annotate_loops_in_kernels_regions.

2022-02-03  Kwok Cheung Yeung  <kcy@codesourcery.com>

	* parser.ccc (cp_parser_omp_clause_map): Update call to
	cp_parser_omp_var_list_no_open.
	(cp_parser_omp_all_clauses): Update calls to cp_parser_omp_var_list.

2018-12-13  Cesar Philippidis  <cesar@codesourcery.com>
	    Nathan Sidwell  <nathan@acm.org>
	    Julian Brown  <julian@codesourcery.com>

	* parser.c (cp_parser_omp_var_list_no_open):  New c_omp_region_type
	argument.  Use it to specialize handling of OMP_CLAUSE_REDUCTION for
	OpenACC.
	(cp_parser_omp_var_list): Add c_omp_region_type argument. Update call
	to cp_parser_omp_var_list_parens.
	(cp_parser_oacc_data_clause): Update call to cp_parser_omp_var_list.
	(cp_parser_omp_clause_reduction): Change is_omp boolean parameter to
	c_omp_region_type.  Update call to cp_parser_omp_var_list_no_open.
	(cp_parser_oacc_all_clauses): Update call to
	cp_parser_omp_clause_reduction.
	(cp_parser_omp_all_clauses): Likewise.
	* semantics.c (finish_omp_reduction_clause): Add c_omp_region_type
	argument.  Suppress user-defined reduction error for OpenACC.
	(finish_omp_clauses): Emit an error on orphan OpenACC gang reductions.

2020-04-19  Chung-Lin Tang  <cltang@codesourcery.com>

	PR other/76739

	* semantics.cc (handle_omp_array_sections_1): Add 'bool &non_contiguous'
	parameter, adjust recursive call site, add cases for allowing
	pointer based multi-dimensional arrays for OpenACC.
	(handle_omp_array_sections): Adjust handle_omp_array_sections_1 call,
	handle non-contiguous case to create dynamic array map.
